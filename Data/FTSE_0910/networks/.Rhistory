write.csv(Dates, file = paste0(subpath,"Dates.csv"),row.names=FALSE)
path <- 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/Test1/'
subpath <- 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/'
myList = list.files(path, pattern="*.csv")
for (i in 1:length(myList)) {
assign(myList[i], read.csv(myList[i]))
}
df <-  Reduce(function(x,y) merge(x,y, by = 'Date'),
list(subset(AAPL.csv, select = c(Date, Close)),
subset(ADBE.csv, select = c(Date, Close)),
subset(AMZN.csv, select = c(Date, Close)),
subset(BRK.B.csv, select = c(Date, Close)),
subset(BSX.csv, select = c(Date, Close)),
subset(CSCO.csv, select = c(Date, Close)),
subset(GE.csv, select = c(Date, Close)),
subset(JNJ.csv, select = c(Date, Close)),
subset(JPM.csv, select = c(Date, Close)),
subset(MMM.csv, select = c(Date, Close)),
subset(MSFT.csv, select = c(Date, Close)),
subset(MTB.csv, select = c(Date, Close)),
subset(NKE.csv, select = c(Date, Close)),
subset(T.csv, select = c(Date, Close)),
subset(UNP.csv, select = c(Date, Close)),
subset(XOM.csv, select = c(Date, Close))))
path <- 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/Test1/'
subpath <- 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/'
myList = list.files(path, pattern="*.csv")
for (i in 1:length(myList)) {
assign(myList[i], read.csv(myList[i]))
}
for (i in 1:length(myList)) {
assign(myList[i], read.csv(paste0(path,myList[i])))
}
df <-  Reduce(function(x,y) merge(x,y, by = 'Date'),
list(subset(AAPL.csv, select = c(Date, Close)),
subset(ADBE.csv, select = c(Date, Close)),
subset(AMZN.csv, select = c(Date, Close)),
subset(BRK.B.csv, select = c(Date, Close)),
subset(BSX.csv, select = c(Date, Close)),
subset(CSCO.csv, select = c(Date, Close)),
subset(GE.csv, select = c(Date, Close)),
subset(JNJ.csv, select = c(Date, Close)),
subset(JPM.csv, select = c(Date, Close)),
subset(MMM.csv, select = c(Date, Close)),
subset(MSFT.csv, select = c(Date, Close)),
subset(MTB.csv, select = c(Date, Close)),
subset(NKE.csv, select = c(Date, Close)),
subset(T.csv, select = c(Date, Close)),
subset(UNP.csv, select = c(Date, Close)),
subset(XOM.csv, select = c(Date, Close))))
stockNames <- gsub(".csv", "", myList)    #Deleting extension from names
names(df) <- c('Date', stockNames)     #Naming variables in df
Stocks <- df[2:ncol(df)]
Dates <- df[1]
StocksNormalized <- data.frame(scale(Stocks))    #Normalization of stocks
write.csv(StocksNormalized, file = paste0(subpath,"StoksNormalized.csv"),row.names=FALSE)
write.csv(Dates, file = paste0(subpath,"Dates.csv"),row.names=FALSE)
names(Stocks)
write.csv(names(Stocks), file = paste0(subpath,"Stocks.csv"),row.names=FALSE)
?write.csv
write.csv(names(Stocks), file = paste0(subpath,"Stocks.csv"),row.names=FALSE, col.names=F)
write.csv(names(Stocks), file = paste0(subpath,"Stocks.csv"),row.names=FALSE, col.names=FALSE)
NAMES(sTOCKS)
names(Stocks)
write.csv(names(Stocks), file = paste0(subpath,"Stocks.csv"),row.names=FALSE)
write.csv(Stocks, file = paste0(subpath,"StocksNotNorm.csv"),row.names=FALSE)
?read.csv
path <- 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/US109senate/'
senate <- read.csv(paste0(path,'109senate.txt'))
View(senate)
senate <- read.csv(paste0(path,'109senate.txt', sep = ""))
senate <- read.csv(paste0(path,'109senate.txt', sep = " "))
senate <- read.table(paste0(path,'109senate.txt', sep = ""))
senate <- read.table(paste0(path,'109senate.txt', sep = ""))
senate <- read.table(paste0(path,'109senate.txt', sep = "", header = T))
senate <- read.table(paste0(path,'109senate.txt', sep = "", header = T))
senate <- read.table(paste0(path,'109senate.txt', sep = ""))
senate <- read.table(paste0(path,'109senate.txt'), sep = ""))
senate <- read.table(paste0(path,'109senate.txt'), sep = "")
senate <- read.table(paste0(path,'109senate.txt'), sep = "", header = T)
senate <- read.table(paste0(path,'109senate.txt'), sep = "t", header = T)
senate <- read.table(paste0(path,'109senate.txt'), sep = "t")
senate <- read.table(paste0(path,'109senate.txt'), sep = "\t")
senate <- read.table(paste0(path,'109senate.txt'), sep = "\t", header = T)
View(senate)
senate <- senate[-c(1,2)]
View(senate)
?gsub
prueba <- gsub(0, -1, senate)
class(prueba)
class(senate)
prueba <- data.frame(gsub(0, -1, senate))
View(prueba)
prueba <- gsub(0, -1, senate)
data.frame(prueba)
p <- data.frame(prueba)
rm(p)
prueba <- senate[senate=="0"] <- -1
senate[senate==0]
prueba <- senate[senate==0] <- -1
senate==0
senate[senate==0]
sum[senate==0]
sum(senate==0)
path <- 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/US109senate/'
senate <- read.table(paste0(path,'109senate.txt'), sep = "\t", header = T)
senate <- senate[-c(1,2)]   #Remove 1st (bills to vote) and 2nd (n missing votes) columns
path <- 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/US109senate/'
senate <- read.table(paste0(path,'109senate.txt'), sep = "\t", header = T)
senate <- read.table(paste0(path,'109senate.txt'), sep = "\t")
, header = T
senate <- senate[-c(1,2)]   #Remove 1st (bills to vote) and 2nd (n missing votes) columns
path <- 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/US109senate/'
senate <- read.table(paste0(path,'109senate.txt'), sep = "\t", header = T)
senate <- senate[-c(1,2)]   #Remove 1st (bills to vote) and 2nd (n missing votes) columns
View(senate)
sum(senate==0)
prueba <- senate[senate==0] <- -1
sum(senate==0)
sum(prueba==0)
senators <- names(senate)
senators
write.csv(senate, file = paste0(subpath,"109senate_clean.csv"))#,row.names=FALSE)
write.csv(senate, file = paste0(path,"109senate_clean.csv"))#,row.names=FALSE)
write.csv(senate, file = paste0(path,"109senate_clean.csv"),row.names=FALSE)
write.csv(senators, file = paste0(path,"senatorsTags.csv"),row.names=FALSE)
rm(list=ls())
folderPath <- 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/'
Sectors <- read.csv(paste0(folderPath,'FTSE_Sectors.csv'))
stockNames <- read.csv(paste0(folderPath,'networks/FTSE_indexes.csv'))
avgDegree <- read.csv(paste0(folderPath, 'networks/avgDegree.csv'))
degreeMatrix <- read.csv(paste0(folderPath, 'networks/degreeMatrix.csv'))
# LOAD ALL EPOCH'S MATRICES
filesList = list.files(paste0(folderPath,'networks/'), pattern="*.csv")
listWeights = list.files(paste0(folderPath,'networks/'), pattern='*weights.csv')
weightedMatrices <- list()
for (i in seq_along(listWeights)) {
weightedMatrices[[i]] <- read.csv(file = listWeights[i], header = F)
}
listSigned = list.files(paste0(folderPath,'networks/'), pattern='*signs.csv')
signedMatrices <- list()
for (i in seq_along(listSigned)) {
signedMatrices[[i]] <- read.csv(file = listSigned[i], header = F)
listWeights = list.files(paste0(folderPath,'networks/'), pattern='*weights.csv')
listWeights = list.files(paste0(folderPath,'networks/'), pattern='*weights.csv')
weightedMatrices <- list()
for (i in seq_along(listWeights)) {
weightedMatrices[[i]] <- read.csv(file = listWeights[i], header = F)
}
listWeights
gwd()
wd()
pwd
pwd()
listWeights = list.files(paste0(folderPath,'networks/'), pattern='*weights.csv')
listWeights
listWeights = list.files(paste0(folderPath,'networks/'), pattern='*weights.csv')
listWeights
listSigned = list.files(paste0(folderPath,'networks/'), pattern='*signs.csv')
signedMatrices <- list()
for (i in seq_along(listSigned)) {
signedMatrices[[i]] <- read.csv(file = listSigned[i], header = F)
}
listWeights = list.files(paste0(folderPath,'networks/'), pattern='*weights.csv')
listWeights
weightedMatrices <- list()
for (i in seq_along(listWeights)) {
weightedMatrices[[i]] <- read.csv(file = listWeights[i], header = F)
}
getwd()
getwd('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/networks/')
?getwd
getwd(C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/networks/)
getwd('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/networks/')
getwd('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/networks')
setwd('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/networks')
for (i in seq_along(listWeights)) {
weightedMatrices[[i]] <- read.csv(file = listWeights[i], header = F)
}
listSigned = list.files(paste0(folderPath,'networks/'), pattern='*signs.csv')
signedMatrices <- list()
for (i in seq_along(listSigned)) {
signedMatrices[[i]] <- read.csv(file = listSigned[i], header = F)
}
library(igraph)
library(sna)
library(network)
library(visNetwork)
library(ndtv)
adjacency_list_signs <- list()
for (i in 1:length(weightedMatrices)) {
adjacency_list_signs[[i]] <- graph_from_adjacency_matrix(as.matrix(signedMatrices[[i]]), mode = "directed",
weighted = NULL, diag = TRUE, add.colnames = NULL, add.rownames = NA)
}
adjacency_list_weights <- list()
for (i in 1:length(weightedMatrices)) {
adjacency_list_weights[[i]] <- graph_from_adjacency_matrix(as.matrix(weightedMatrices[[i]]), mode = "directed",
weighted = T, diag = TRUE, add.colnames = NULL, add.rownames = NA)
}
net <- simplify(adjacency_list_signs[[1]], remove.multiple = F, remove.loops = T)
net2 <- simplify(adjacency_list_weights[[1]], remove.multiple = F, remove.loops = T)
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]))
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
deg <- degree(net, mode = 'all')
?degree
deg <- degree(net, mode = 'total')
deg <- degree(net, mode = 'in')
deg <- degree(net, mode = 'out')
deg <- degree(net)
deg <- degree(net2)
deg <- degree(net)
V(net)
E(net)
V(net)$size
degreeMatrix[,1]
deg <- degreeMatrix[,1]
V(net)$size <- deg*3
avgDegree <- read.csv(paste0(folderPath, 'networks/avgDegree.csv'), header = F)
View(avgDegree)
View(degreeMatrix)
degreeMatrix <- read.csv(paste0(folderPath, 'networks/degreeMatrix.csv'), header = F)
deg <- degreeMatrix[,1]
V(net)$size <- deg*3
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
V(net)$size <- deg
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
V(net)$size <- deg*0.3
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
E(net)$width <- E(net)$weight/6
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
V(net)$size <- log(deg)
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
V(net)$size <- 3*log(deg)
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
V(net)$size <- 3*abs(log(deg))
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
V(net)$size <- 3*abs(log(deg))
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
V(net)$size
V(net)$size <- 3*log(deg)
V(net)$size
V(net)$color
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
testPath <- 'C:\Users\Manuel\Desktop\Southampton\MasterThesis\testNetworkR\polnet2016\Data files'
setwd('C:/Users/Manuel/Desktop/Southampton/MasterThesis/testNetworkR/polnet2016/Data files/')
rm(list=ls())
setwd('C:/Users/Manuel/Desktop/Southampton/MasterThesis/testNetworkR/polnet2016/Data files/')
nodes2 <- read.csv("Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
View(links2)
View(links2)
View(nodes2)
Stocks <- read.csv(paste0(folderPath,'FTSE_Stocks.csv'))
rm(list=ls())
folderPath <- 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/'
Stocks <- read.csv(paste0(folderPath,'FTSE_Stocks.csv'))
stockNames <- read.csv(paste0(folderPath,'networks/FTSE_indexes.csv'))
avgDegree <- read.csv(paste0(folderPath, 'networks/avgDegree.csv'), header = F)
degreeMatrix <- read.csv(paste0(folderPath, 'networks/degreeMatrix.csv'), header = F)
View(Stocks)
Stocks <- Stocks[2:end,]
length(Stocks)
nrow(Stocks)
Stocks <- Stocks[2:nrow(Stocks),]
c <- palette(rainbow(11))
c
c <- palette(rainbow(5))
c
c
c <- palette(rainbow(5))
c
c <- palette(rainbow(11))
c
c
palette(rainbow(11))
c
c
palette(rainbow(11))
c
palette(rainbow(7))
c
palette(rainbow(7))
c<-palette(rainbow(7))
c<-palette(rainbow(11))
c<-palette(rainbow(11))
View(Stocks)
V(net)$color <- colrs[Stocks$Sector.type]
colrs <- palette(rainbow(11))
colrs <- palette(rainbow(11))   #Bug detected: sometimes it doesnt save this specifications at first attempt
rm(c)
V(net)$color <- colrs[Stocks$Sector.type]
library(igraph)
library(network)
library(sna)
library(ndtv)
library(visNetwork)
folderPath <- 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/'
Stocks <- read.csv(paste0(folderPath,'FTSE_Stocks.csv'))
Stocks <- Stocks[2:nrow(Stocks),]  # remove AAL, not in sample
stockNames <- read.csv(paste0(folderPath,'networks/FTSE_indexes.csv'))
avgDegree <- read.csv(paste0(folderPath, 'networks/avgDegree.csv'), header = F)
degreeMatrix <- read.csv(paste0(folderPath, 'networks/degreeMatrix.csv'), header = F)
# LOAD ALL EPOCH'S MATRICES
filesList = list.files(paste0(folderPath,'networks/'), pattern="*.csv")
# matrix_list <- vector(mode="character", length=0)
# for (i in 1:length(filesList)) {
#   matrix_list[i] = unlist(strsplit(filesList[i], split='.', fixed=TRUE))[1]   #remove .csv
# }
# Open folder containing adjacency matrices
setwd('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/networks')
# List of weighted matrices
listWeights = list.files(paste0(folderPath,'networks/'), pattern='*weights.csv')
weightedMatrices <- list()
for (i in seq_along(listWeights)) {
weightedMatrices[[i]] <- read.csv(file = listWeights[i], header = F)
}
# List of signed matrices
listSigned = list.files(paste0(folderPath,'networks/'), pattern='*signs.csv')
signedMatrices <- list()
for (i in seq_along(listSigned)) {
signedMatrices[[i]] <- read.csv(file = listSigned[i], header = F)
}
# Required libraries to plot networks
library(igraph)
library(network)
library(sna)
library(ndtv)
library(visNetwork)
adjacency_list_signs <- list()
for (i in 1:length(weightedMatrices)) {
adjacency_list_signs[[i]] <- graph_from_adjacency_matrix(as.matrix(signedMatrices[[i]]), mode = "directed",
weighted = NULL, diag = TRUE, add.colnames = NULL, add.rownames = NA)
}
adjacency_list_weights <- list()
for (i in 1:length(weightedMatrices)) {
adjacency_list_weights[[i]] <- graph_from_adjacency_matrix(as.matrix(weightedMatrices[[i]]), mode = "directed",
weighted = T, diag = TRUE, add.colnames = NULL, add.rownames = NA)
}
net <- simplify(adjacency_list_signs[[1]], remove.multiple = F, remove.loops = T)
V(net)$label <- stockNames[,2]
E(net)$width <- E(net)$weight/6
E(net)$arrow.size <- .2
colrs <- palette(rainbow(11))
colrs <- palette(rainbow(11))   #Bug detected: sometimes it doesnt save this specifications at first attempt
V(net)$color <- colrs[Stocks$Sector.type]
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
?legend
unique(Stocks$Sector)
legend(x=-1.5, y=-1.1, unique(Stocks$Sector), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
legend(x=5, y=0, unique(Stocks$Sector), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
legend(x=2, y=5, unique(Stocks$Sector), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
legend(x=2, y=3, unique(Stocks$Sector), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
legend(x=0, y=3, unique(Stocks$Sector), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
legend(x=2, y=3, unique(Stocks$Sector), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
legend(x=2, y=3, unique(Stocks$Sector), pch=21,  col="#777777", pt.bg=colrs,
pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp = 1)
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
legend(x=2, y=3, unique(Stocks$Sector), pch=21,  col="#777777", pt.bg=colrs,
pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp = 0.5)
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
legend(x=1, y=1, unique(Stocks$Sector), pch=21,  col="#777777", pt.bg=colrs,
pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp = 0.2)
unique(Stocks$Sector)
(Stocks$Sector.type==1)
Stocks$Sector[(Stocks$Sector.type==1)]
length(unique(Stocks$Sector.type))
Stocks$Sector[(Stocks$Sector.type==c(1:nSectors))]
nSectors <- length(unique(Stocks$Sector.type))
Stocks$Sector[(Stocks$Sector.type==c(1:nSectors))]
(Stocks$Sector.type==c(1:nSectors))
colrs[Stocks$Sector.type]
levels(Stocks$Sector)
?levels
StocksFull <- read.csv(paste0(folderPath,'FTSE_Stocks.csv'))
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
legend(x=1, y=1, unique(StocksFull$Sector), pch=21,  col="#777777", pt.bg=colrs,
pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp = 0.2)
?rainbow
require(graphics)
colrs <- palette(rainbow(nSectors))
colrs <- palette(rainbow(nSectors))   #Bug detected: sometimes it doesnt save this specifications at first attempt
V(net)$color <- colrs[Stocks$Sector.type]
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
legend(x=1, y=1, unique(StocksFull$Sector), pch=21,  col="#777777", pt.bg=colrs,
pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp = 0.2)
marker = list(color = brewer.pal(11, 'Paired')
)
require(RColorBrewer)
marker = list(color = brewer.pal(11, 'Paired'))
colrs = list(color = brewer.pal(n_palette, "Palette_Name")
V(net)$color <- colrs[Stocks$Sector.type]
colrs = list(color = brewer.pal(11, 'Paired')
V(net)$color <- colrs[Stocks$Sector.type]
colrs = list(color = brewer.pal(11, 'Paired'))
V(net)$color <- colrs[Stocks$Sector.type]
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
legend(x=1, y=1, unique(StocksFull$Sector), pch=21,  col="#777777", pt.bg=colrs,
pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp = 0.2)
colrs[Stocks$Sector.type]
colrs[1]
colrs[[1]
]
colrs[1][1]
str(colrs)
colrs$color
colrs$color[1]
V(net)$color <- colrs$color[Stocks$Sector.type]
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
legend(x=1, y=1, unique(StocksFull$Sector), pch=21,  col="#777777", pt.bg=colrs$color,
pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp = 0.2)
colrs$color[Stocks$Sector.type]
V(net)$color <- colrs$color[Stocks$Sector.type]
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
colrs = list(color = brewer.pal(11, 'Paired'))
V(net)$color <- colrs$color[Stocks$Sector.type]
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
legend(x=1, y=1, unique(StocksFull$Sector), pch=21,  col="#777777", pt.bg=colrs$color,
pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp = 0.2)
V(net)$color
warnings()
colrs <- palette(rainbow(nSectors))
V(net)$color <- colrs[Stocks$Sector.type]
V(net)$color
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
V(net)$color <- colrs[Stocks$Sector.type]
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
colrs <- palette(rainbow(nSectors))
warnings()
V(net)$color <- colrs[Stocks$Sector.type]
# V(net)$color <- colrs$color[Stocks$Sector.type]
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
legend(x=1, y=1, unique(StocksFull$Sector), pch=21,  col="#777777", pt.bg=colrs$color,
pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp = 0.2)
nSectors <- length(unique(Stocks$Sector.type))
colrs <- palette(rainbow(nSectors))
colrs <- palette(rainbow(nSectors))   #Bug detected: sometimes it doesnt save this specifications at first attempt
V(net)$color <- colrs[Stocks$Sector.type]
plot(net, edge.arrow.size=.05, edge.curved=.1, vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black')
legend(x=1, y=1, unique(StocksFull$Sector), pch=21,  col="#777777", pt.bg=colrs,
pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp = 0.2)
V(net)
V(net)$color
