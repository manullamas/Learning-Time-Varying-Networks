sortedDeg <- info.stocks[order(deg.in, decreasing=T),]
hubs <- sortedDeg[sortedDeg$deg.in > mean(deg.in),]
hubs
ecount(netWeights)
ecount(netSparse)
ecount(netSigns)
deg.out <- igraph::degree(netSparse, mode = 'out')
deg.in <- igraph::degree(netSparse, mode = 'in')
deg.total <- igraph::degree(netSparse, mode = 'total')
info.stocks <- cbind(stockNames$FTSE100_list, Sectors[,3], data.frame(deg.total), data.frame(deg.out), data.frame(deg.in))  # avgDegree???
names(info.stocks) <- c('stocks', 'sectors', 'deg.total', 'deg.out', 'deg.in')
sortedDeg <- info.stocks[order(deg.in, decreasing=T),]
hubs <- sortedDeg[sortedDeg$deg.in > mean(deg.in),]
hubs
matplot(info.stocks, type = c("b"), pch=1, col = 1:3)
text(1:nStocks, info.stocks$deg.total, labels = info.stocks$`stockNames$FTSE100_list`, col = col$color[Sectors$Sector.type])
legend(x = 60, y = 95, legend = c('deg.out','deg.in','deg.total'), col=1:3, pch=1, pt.cex=2, cex=.8, ncol=1, y.intersp = 0.2)
matplot(info.stocks, type = c("b"), pch=1, col = 1:3)
text(1:nStocks, info.stocks$deg.total, labels = info.stocks$`stockNames$FTSE100_list`, col = col$color[Sectors$Sector.type])
matplot(info.stocks, type = c("b"), pch=1, col = 1:3)
par(mfrow=c(1,1))  # bigger!
matplot(info.stocks, type = c("b"), pch=1, col = 1:3)
text(1:nStocks, info.stocks$deg.total, labels = info.stocks$`stockNames$FTSE100_list`, col = col$color[Sectors$Sector.type])
nStocks <- length(stockNames[,2])
matplot(info.stocks, type = c("b"), pch=1, col = 1:3)
text(1:nStocks, info.stocks$deg.total, labels = info.stocks$`stockNames$FTSE100_list`, col = col$color[Sectors$Sector.type])
text(1:nStocks, info.stocks$deg.total, labels = info.stocks$`stockNames$FTSE100_list`, col = col$color[Sectors$Sector.type])
legend(x = 60, y = 95, legend = c('deg.out','deg.in','deg.total'), col=1:3, pch=1, pt.cex=2, cex=.8, ncol=1, y.intersp = 0.2)
text(1:nStocks, info.stocks$deg.total, labels = info.stocks$stocks, col = col$color[Sectors$Sector.type])
legend(x = 60, y = 95, legend = c('deg.out','deg.in','deg.total'), col=1:3, pch=1, pt.cex=2, cex=.8, ncol=1, y.intersp = 0.2)
legend(x = 60, y = 95, legend = c('deg.out','deg.in','deg.total'), col=1:3, pch=1, pt.cex=2, cex=.8, ncol=1, y.intersp = 0.2)
plot(1:length(maxValues), unlist(maxValues), xlab='epoch', ylab='weight', main='Max Weights')
info.stocks <- cbind(stockNames$FTSE100_list, Sectors[,3], data.frame(deg.total), data.frame(deg.out), data.frame(deg.in))  # avgDegree???
names(info.stocks) <- c('stocks', 'sectors', 'deg.total', 'deg.out', 'deg.in')
sortedDeg <- info.stocks[order(deg.in, decreasing=T),]
hubs <- sortedDeg[sortedDeg$deg.in > mean(deg.in),]
hubs
matplot(info.stocks, type = c("b"), pch=1, col = 1:3, main = 'Network degrees')
text(1:nStocks, info.stocks$deg.total, labels = info.stocks$stocks, col = col$color[Sectors$Sector.type])
legend(x = 60, y = 95, legend = c('deg.out','deg.in','deg.total'), col=1:3, pch=1, pt.cex=2, cex=.8, ncol=1, y.intersp = 0.2)
maxValues <- lapply(weightedMatrices, function(x) max(x))
minValues <- lapply(weightedMatrices, function(x) min(x))
means <- lapply(weightedMatrices, function(x) mean(as.matrix(x)))
sds <- lapply(weightedMatrices, function(x) sd(as.matrix(x)))
T <- length(listSigned)
info.epochs <- c(1:T, maxValues, minValues, means, sds)
info.ecpochs
info.epochs
info.epochs <- cbind(1:T, maxValues, minValues, means, sds)
###  cent <- lapply(netSparse, function(x) centralization.degree(x)$centralization)
View(info.epochs)
View(info.epochs)
rm(info.epochs)
info.epochs <- cbind(1:T, maxValues, minValues, means, sds)
class(info.epochs)
View(info.epochs)
plot(1:length(maxValues), unlist(maxValues), xlab='epoch', ylab='weight', main='Max Weights')
plot(1:length(minValues), unlist(minValues), xlab='epoch', ylab='weight', main='Min Weights')
plot(1:length(maxValues), unlist(maxValues), xlab='epoch', ylab='weight', main='Max Weights')
plot(1:length(means), unlist(means), xlab='epoch', ylab='weight', main='mean weights')
plot(1:length(means), unlist(means), xlab='epoch', ylab='weight', main='mean weights')
u
plot(1:length(maxValues), unlist(maxValues), xlab='epoch', ylab='weight', main='Max Weights')
plot(1:length(minValues), unlist(minValues), xlab='epoch', ylab='weight', main='Min Weights')
plot(1:length(means), unlist(means), xlab='epoch', ylab='weight', main='mean weights')
hubs
igraph::list.vertex.attributes(netSparse)
igraph::list.edge.attributes(netSparse)
hist(E(netSparse)$weight)
hist(E(netSparse)$weight,20)
hist(E(netWeights)$weight,20)
hist(E(netSparse)$weight,20)
hist(E(netWeights)$weight,20)
layouts <- grep("^layout_", ls("package:igraph"), value=TRUE)[-1] # Remove layouts that do not apply to our graph.
layouts <- layouts[!grepl("bipartite|merge|norm|sugiyama|tree|star|circle|nicely|gem", layouts)]
par(mfrow=c(3,3), mar=c(1,1,1,1))
pdf(file = 'pruebaSparse_In_layouts.pdf', width = 16, height = 15)
for (layout in layouts) {
print(layout)
l <- do.call(layout, list(netSparse))
plot.igraph(netSparse, layout = l, edge.color = edge.in.col, edge.curved=.3, edge.width= (E(netSparse)$weight)/3,
vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black', vertex.size = (deg.out+deg.in/10),
edge.arrow.size = 1, edge.arrow.width = 1,
main = layout, edge.arrow.mode = 0)
}
dev.off()
list(netSparse)
absWeights <- abs(E(netSparse)$weight)
signWeights <- E(netSparse)$weight
layouts <- grep("^layout_", ls("package:igraph"), value=TRUE)[-1] # Remove layouts that do not apply to our graph.
layouts <- layouts[!grepl("bipartite|merge|norm|sugiyama|tree|star|circle|nicely|gem", layouts)]
par(mfrow=c(3,3), mar=c(1,1,1,1))
pdf(file = 'pruebaSparse_In_layouts.pdf', width = 16, height = 15)
E(netSparse)$weight <- absWeights
for (layout in layouts) {
print(layout)
l <- do.call(layout, list(netSparse))
plot.igraph(netSparse, layout = l, edge.color = edge.in.col, edge.curved=.3, edge.width= (E(netSparse)$weight)/3,
vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black', vertex.size = (deg.out+deg.in/10),
edge.arrow.size = 1, edge.arrow.width = 1,
main = layout, edge.arrow.mode = 0)
}
E(netSparse)$weight <- signWeights
dev.off()
edge.in.col
edge.start <- ends(netWeights, es=E(netWeights), names=F)[,1]
edge.end <- ends(netWeights, es=E(netWeights), names=F)[,2]
edge.out.col <- V(netWeights)$color[edge.start]
edge.in.col <- V(netWeights)$color[edge.end]
layouts <- grep("^layout_", ls("package:igraph"), value=TRUE)[-1] # Remove layouts that do not apply to our graph.
layouts <- layouts[!grepl("bipartite|merge|norm|sugiyama|tree|star|circle|nicely|gem", layouts)]
par(mfrow=c(3,3), mar=c(1,1,1,1))
pdf(file = 'pruebaSparse_In_layouts2.pdf', width = 16, height = 15)
E(netSparse)$weight <- absWeights
for (layout in layouts) {
print(layout)
l <- do.call(layout, list(netSparse))
plot.igraph(netSparse, layout = l, edge.color = edge.in.col, edge.curved=.3, edge.width= (E(netSparse)$weight)/3,
vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black', vertex.size = (deg.out+deg.in/10),
edge.arrow.size = 1, edge.arrow.width = 1,
main = layout, edge.arrow.mode = 0)
}
E(netSparse)$weight <- signWeights
dev.off()
pdf(file = 'pruebaSparse_In_kk.pdf', width = 16, height = 15)
plot.igraph(netSparse, layout = kk, edge.color = edge.in.col, edge.curved=.3, edge.width= (E(netSparse)$weight)/3,
vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black', vertex.size =deg.out,
edge.arrow.size = 1, edge.arrow.width = 1,
main = 'kk -in', edge.arrow.mode = 0)
legend(x=0.5, y=-0.8, unique(SectorsFull$Sector), pch=21,  col="#777777", pt.bg=col$color,
pt.cex=1.3, cex=0.7, bty="n", ncol=1, y.intersp = 1, x.intersp = 1)
dev.off()
pdf(file = 'pruebaSparse_In_kk.pdf', width = 16, height = 15)
plot.igraph(netSparse, layout = kk, edge.color = edge.in.col, edge.curved=.3, edge.width= (E(netSparse)$weight)/3,
vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black', vertex.size =deg.out,
edge.arrow.size = 1, edge.arrow.width = 1,
main = 'kk -in', edge.arrow.mode = 0)
legend(x=0.5, y=-0.8, unique(SectorsFull$Sector), pch=21,  col="#777777", pt.bg=col$color,
pt.cex=1.3, cex=0.7, bty="n", ncol=1, y.intersp = 1, x.intersp = 1)
dev.off()
dev.off()
plot.igraph(netSparse, layout = kk, edge.color = edge.in.col, edge.curved=.3, edge.width= (E(netSparse)$weight)/3,
vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black', vertex.size =deg.out,
edge.arrow.size = 1, edge.arrow.width = 1,
main = 'kk -in', edge.arrow.mode = 0)
kk <- layout_with_kk(netSparse, weights = absWeights)
pdf(file = 'pruebaSparse_In_kk.pdf', width = 16, height = 15)
plot.igraph(netSparse, layout = kk, edge.color = edge.in.col, edge.curved=.3, edge.width= (E(netSparse)$weight)/3,
vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black', vertex.size =deg.out,
edge.arrow.size = 1, edge.arrow.width = 1,
main = 'kk -in', edge.arrow.mode = 0)
legend(x=0.5, y=-0.8, unique(SectorsFull$Sector), pch=21,  col="#777777", pt.bg=col$color,
pt.cex=1.3, cex=0.7, bty="n", ncol=1, y.intersp = 1, x.intersp = 1)
dev.off()
plot.igraph(netSparse, layout = kk, edge.color = edge.in.col, edge.curved=.3, edge.width= (E(netSparse)$weight)/3,
vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black', vertex.size =deg.out,
edge.arrow.size = 1, edge.arrow.width = 1,
main = 'kk -in', edge.arrow.mode = 0)
plot.igraph(netSparse, layout = kk, edge.color = edge.out.col, edge.curved=.3, edge.width= (E(netSparse)$weight)/3,
vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black', vertex.size =deg.out,
edge.arrow.size = 1, edge.arrow.width = 1,
main = 'kk -in', edge.arrow.mode = 0)
rm(list=ls())
#        LOAD EXPLORATORY VARIABLES
setwd('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/networks')
folderPath <- 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/'
SectorsFull <- read.csv(paste0(folderPath,'FTSE_Stocks.csv'))
Sectors <- SectorsFull[2:nrow(SectorsFull),]  # remove AAL, not in sample
stockNames <- read.csv(paste0(folderPath,'FTSE_indexes.csv'))
avgDegree <- read.csv('avgDegree.csv', header = F)
degreeMatrix <- read.csv( 'degreeMatrix.csv', header = F)
GainLossMatrix <- read.csv('GainLoss.csv', header = F)
#         LOAD ALL EPOCH'S MATRICES
# Create lists of weighted, signed and distance matrices
listWeights = list.files(paste0(folderPath,'networks/'), pattern='*weights.csv')
weightedMatrices <- list()
listSigned = list.files(paste0(folderPath,'networks/'), pattern='*signs.csv')
signedMatrices <- list()
listDistances = list.files(paste0(folderPath,'networks/'), pattern='dist*')
distMatrices <- list()
for (t in seq_along(listWeights)) {
weightedMatrices[[t]] <- read.csv(file = listWeights[t], header = F)
signedMatrices[[t]] <- read.csv(file = listSigned[t], header = F)
distMatrices[[t]] <- read.csv(file = listDistances[t], header = F)
}
# Define useful variables
nStocks <- length(stockNames[,2])
nSectors <- length(unique(Sectors$Sector.type))
T <- length(listSigned)
labels <- as.character(stockNames[,2])
## change the input of stockNames(use sectors dataframe so simpler)
# stockNames <- cbind(1:length(stockNames), stockNames)
####################################################################################################
####################################################################################################
####################################################################################################
#################################
######   NETWORK DRAWING   ######
#################################
library(igraph)
library(network)
library(sna)
library(ndtv)
library(visNetwork)
#        CREATE igraph OBJECTS: signed, weighted and sparse nets
adjacency_list_weights <- list()
adjacency_list_signs <- list()
for (i in 1:length(weightedMatrices)) {
adjacency_list_weights[[i]] <- graph_from_adjacency_matrix(as.matrix(weightedMatrices[[i]]),
mode = "directed", weighted = T, diag = TRUE,
add.colnames = NULL, add.rownames = NA)
adjacency_list_signs[[i]] <- graph_from_adjacency_matrix(as.matrix(signedMatrices[[i]]),
mode = "directed", weighted = NULL, diag = TRUE,
add.colnames = NULL, add.rownames = NA)
}
# igraph format -> http://igraph.org/r/doc/graph_from_adjacency_matrix.html
netSigns <- simplify(adjacency_list_signs[[1]], remove.multiple = F, remove.loops = T)
netWeights <- simplify(adjacency_list_weights[[1]], remove.multiple = F, remove.loops = T)
bound <- 0.01
netSparse <- delete_edges(netWeights, E(netWeights)[abs(weight) < bound])  # choose a suitable cut off
netWeights <- simplify(adjacency_list_weights[[1]], remove.multiple = F, remove.loops = T)
netSparse <- delete_edges(netWeights, E(netWeights)[abs(weight) < bound])  # choose a suitable cut off
netWeights <- simplify(adjacency_list_weights[[1]], remove.multiple = F, remove.loops = T)
rm(list=ls())
setwd('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/networks')
folderPath <- 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/'
SectorsFull <- read.csv(paste0(folderPath,'FTSE_Stocks.csv'))
Sectors <- SectorsFull[2:nrow(SectorsFull),]  # remove AAL, not in sample
stockNames <- read.csv(paste0(folderPath,'FTSE_indexes.csv'))
avgDegree <- read.csv('avgDegree.csv', header = F)
degreeMatrix <- read.csv( 'degreeMatrix.csv', header = F)
GainLossMatrix <- read.csv('GainLoss.csv', header = F)
#         LOAD ALL EPOCH'S MATRICES
# Create lists of weighted, signed and distance matrices
listWeights = list.files(paste0(folderPath,'networks/'), pattern='*weights.csv')
weightedMatrices <- list()
listSigned = list.files(paste0(folderPath,'networks/'), pattern='*signs.csv')
signedMatrices <- list()
listDistances = list.files(paste0(folderPath,'networks/'), pattern='dist*')
distMatrices <- list()
for (t in seq_along(listWeights)) {
weightedMatrices[[t]] <- read.csv(file = listWeights[t], header = F)
signedMatrices[[t]] <- read.csv(file = listSigned[t], header = F)
distMatrices[[t]] <- read.csv(file = listDistances[t], header = F)
}
# Define useful variables
nStocks <- length(stockNames[,2])
nSectors <- length(unique(Sectors$Sector.type))
T <- length(listSigned)
labels <- as.character(stockNames[,2])
## change the input of stockNames(use sectors dataframe so simpler)
# stockNames <- cbind(1:length(stockNames), stockNames)
####################################################################################################
####################################################################################################
####################################################################################################
#################################
######   NETWORK DRAWING   ######
#################################
library(igraph)
library(network)
library(sna)
library(ndtv)
library(visNetwork)
#        CREATE igraph OBJECTS: signed, weighted and sparse nets
adjacency_list_weights <- list()
adjacency_list_signs <- list()
for (i in 1:length(weightedMatrices)) {
adjacency_list_weights[[i]] <- graph_from_adjacency_matrix(as.matrix(weightedMatrices[[i]]),
mode = "directed", weighted = T, diag = TRUE,
add.colnames = NULL, add.rownames = NA)
adjacency_list_signs[[i]] <- graph_from_adjacency_matrix(as.matrix(signedMatrices[[i]]),
mode = "directed", weighted = NULL, diag = TRUE,
add.colnames = NULL, add.rownames = NA)
}
for (i in 1:length(weightedMatrices)) {
adjacency_list_weights[[i]] <- graph_from_adjacency_matrix(as.matrix(weightedMatrices[[i]]),
mode = "directed", weighted = T, diag = TRUE,
add.colnames = NULL, add.rownames = NA)
}
for (i in 1:length(weightedMatrices)) {
adjacency_list_signs[[i]] <- graph_from_adjacency_matrix(as.matrix(signedMatrices[[i]]),
mode = "directed", weighted = NULL, diag = TRUE,
add.colnames = NULL, add.rownames = NA)
}
?graph_from_adjacency_matrix
for (i in 1:length(weightedMatrices)) {
adjacency_list_weights[[i]] <- graph_from_adjacency_matrix(as.matrix(weightedMatrices[[i]]),
mode = "directed", weighted = TRUE, diag = TRUE,
add.colnames = NULL, add.rownames = NA)
adjacency_list_signs[[i]] <- graph_from_adjacency_matrix(as.matrix(signedMatrices[[i]]),
mode = "directed", weighted = NULL, diag = TRUE,
add.colnames = NULL, add.rownames = NA)
}
netSigns <- simplify(adjacency_list_signs[[1]], remove.multiple = F, remove.loops = T)
netWeights <- simplify(adjacency_list_weights[[1]], remove.multiple = F, remove.loops = T)
bound <- 0.01
netSparse <- delete_edges(netWeights, E(netWeights)[abs(weight) < bound])  # choose a suitable cut off
ecount(netSigns)
ecount(netWeights)
igraph::list.vertex.attributes(netWeights)
igraph::list.edge.attributes(netWeights)
ecount(netWeights)
ecount(netSparse)
ecount(netSigns)
deg.out <- igraph::degree(netSparse, mode = 'out')
deg.in <- igraph::degree(netSparse, mode = 'in')
deg.total <- igraph::degree(netSparse, mode = 'total')
V(netWeights)$sectors <- Sectors$Sector
V(netWeights)$sector.type <- Sectors$Sector.type
library(RColorBrewer)
col = list(color = brewer.pal(11, 'Paired'))
V(netWeights)$color <- col$color[Sectors$Sector.type]
V(netWeights)$size <- 3*log(deg.out)
absWeights <- abs(E(netSparse)$weight)
signWeights <- E(netSparse)$weight
edge.start <- ends(netWeights, es=E(netWeights), names=F)[,1]
E(netWeights)$weights.abs <- abs(E(netWeights)$weight)
edge.end <- ends(netWeights, es=E(netWeights), names=F)[,2]
edge.out.col <- V(netWeights)$color[edge.start]
E(netWeights)$col.out <- edge.out.col
edge.in.col <- V(netWeights)$color[edge.end]
E(netWeights)$col.in <- edge.in.col
netSparse <- delete_edges(netWeights, E(netWeights)[abs(weight) < bound])  # choose a suitable cut off
kk <- layout_with_kk(netSparse, weights = absWeights)
plot.igraph(netSparse, layout = kk, edge.color = edge.out.col, edge.curved=.3, edge.width= (E(netSparse)$weight)/3,
vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black', vertex.size =deg.out,
edge.arrow.size = 1, edge.arrow.width = 1,
main = 'kk -in', edge.arrow.mode = 0)
legend(x=0.5, y=-0.8, unique(SectorsFull$Sector), pch=21,  col="#777777", pt.bg=col$color,
pt.cex=1.3, cex=0.7, bty="n", ncol=1, y.intersp = 1, x.intersp = 1)
plot.igraph(netSparse, layout = kk, edge.color = edge.in.col, edge.curved=.3, edge.width= (E(netSparse)$weight)/3,
vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black', vertex.size =deg.out,
edge.arrow.size = 1, edge.arrow.width = 1,
main = 'kk -in', edge.arrow.mode = 0)
info.stocks
info.stocks <- cbind(stockNames$FTSE100_list, Sectors[,3], data.frame(deg.total), data.frame(deg.out), data.frame(deg.in))  # avgDegree???
info.stocks <- cbind(stockNames$FTSE100_list, Sectors[,3], data.frame(deg.total), data.frame(deg.out), data.frame(deg.in))  # avgDegree???
names(info.stocks) <- c('stocks', 'sectors', 'deg.total', 'deg.out', 'deg.in')
sortedDeg <- info.stocks[order(deg.in, decreasing=T),]
hubs <- sortedDeg[sortedDeg$deg.in > mean(deg.in),]
info.stocks
edge.out.col
absWeights <- abs(E(netSparse)$weight)
signWeights <- E(netSparse)$weight
E(netSparse)$weights.abs <- abs(E(netSparse)$weight)
edge.start <- ends(netSparse, es=E(netSparse), names=F)[,1]
edge.end <- ends(netWeights, es=E(netWeights), names=F)[,2]
edge.out.col <- V(netSparse)$color[edge.start]
edge.in.col <- V(netSparse)$color[edge.end]
E(netSparse)$col.out <- edge.out.col
E(netSparse)$col.in <- edge.in.col
rm(list=ls())
setwd('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/networks')
folderPath <- 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE_0910/'
SectorsFull <- read.csv(paste0(folderPath,'FTSE_Stocks.csv'))
Sectors <- SectorsFull[2:nrow(SectorsFull),]  # remove AAL, not in sample
stockNames <- read.csv(paste0(folderPath,'FTSE_indexes.csv'))
avgDegree <- read.csv('avgDegree.csv', header = F)
degreeMatrix <- read.csv( 'degreeMatrix.csv', header = F)
GainLossMatrix <- read.csv('GainLoss.csv', header = F)
#         LOAD ALL EPOCH'S MATRICES
# Create lists of weighted, signed and distance matrices
listWeights = list.files(paste0(folderPath,'networks/'), pattern='*weights.csv')
weightedMatrices <- list()
listSigned = list.files(paste0(folderPath,'networks/'), pattern='*signs.csv')
signedMatrices <- list()
listDistances = list.files(paste0(folderPath,'networks/'), pattern='dist*')
distMatrices <- list()
for (t in seq_along(listWeights)) {
weightedMatrices[[t]] <- read.csv(file = listWeights[t], header = F)
signedMatrices[[t]] <- read.csv(file = listSigned[t], header = F)
distMatrices[[t]] <- read.csv(file = listDistances[t], header = F)
}
# Define useful variables
nStocks <- length(stockNames[,2])
nSectors <- length(unique(Sectors$Sector.type))
T <- length(listSigned)
labels <- as.character(stockNames[,2])
## change the input of stockNames(use sectors dataframe so simpler)
# stockNames <- cbind(1:length(stockNames), stockNames)
####################################################################################################
####################################################################################################
####################################################################################################
#################################
######   NETWORK DRAWING   ######
#################################
library(igraph)
library(network)
library(sna)
library(ndtv)
library(visNetwork)
#        CREATE igraph OBJECTS: signed, weighted and sparse nets
adjacency_list_weights <- list()
adjacency_list_signs <- list()
for (i in 1:length(weightedMatrices)) {
adjacency_list_weights[[i]] <- graph_from_adjacency_matrix(as.matrix(weightedMatrices[[i]]),
mode = "directed", weighted = TRUE, diag = TRUE,
add.colnames = NULL, add.rownames = NA)
adjacency_list_signs[[i]] <- graph_from_adjacency_matrix(as.matrix(signedMatrices[[i]]),
mode = "directed", weighted = NULL, diag = TRUE,
add.colnames = NULL, add.rownames = NA)
}
# igraph format -> http://igraph.org/r/doc/graph_from_adjacency_matrix.html
netSigns <- simplify(adjacency_list_signs[[1]], remove.multiple = F, remove.loops = T)
netWeights <- simplify(adjacency_list_weights[[1]], remove.multiple = F, remove.loops = T)
bound <- 0.01
netSparse <- delete_edges(netWeights, E(netWeights)[abs(weight) < bound])  # choose a suitable cut off
##        PARAMETER SETTING (NETWORKS)
# net <- list(netSparse, netWeights)
ecount(netSigns)
ecount(netWeights)
igraph::list.vertex.attributes(netWeights)
igraph::list.edge.attributes(netWeights)
ecount(netWeights)
ecount(netSparse)
ecount(netSigns)
deg.out <- igraph::degree(netSparse, mode = 'out')
deg.in <- igraph::degree(netSparse, mode = 'in')
deg.total <- igraph::degree(netSparse, mode = 'total')
info.stocks <- cbind(stockNames$FTSE100_list, Sectors[,3], data.frame(deg.total), data.frame(deg.out), data.frame(deg.in))  # avgDegree???
names(info.stocks) <- c('stocks', 'sectors', 'deg.total', 'deg.out', 'deg.in')
sortedDeg <- info.stocks[order(deg.in, decreasing=T),]
hubs <- sortedDeg[sortedDeg$deg.in > mean(deg.in),]
# Set Vertex attbs.
V(netWeights)$sectors <- Sectors$Sector
V(netWeights)$sector.type <- Sectors$Sector.type
library(RColorBrewer)
col = list(color = brewer.pal(11, 'Paired'))
V(netWeights)$color <- col$color[Sectors$Sector.type]
V(netWeights)$size <- 3*log(deg.out)
# Set Edges attbs.
absWeights <- abs(E(netSparse)$weight)
signWeights <- E(netSparse)$weight
E(netSparse)$weights.abs <- abs(E(netSparse)$weight)
edge.start <- ends(netSparse, es=E(netSparse), names=F)[,1]
edge.end <- ends(netWeights, es=E(netWeights), names=F)[,2]
edge.end <- ends(netSparse, es=E(netSparse), names=F)[,2]
edge.out.col <- V(netSparse)$color[edge.start]
edge.in.col <- V(netSparse)$color[edge.end]
E(netSparse)$col.out <- edge.out.col
E(netSparse)$col.in <- edge.in.col
igraph::list.vertex.attributes(netSparse)
igraph::list.edge.attributes(netSparse)
signWeights <- E(netSparse)$weight
edge.start <- ends(netSparse, es=E(netSparse), names=F)[,1]
edge.end <- ends(netSparse, es=E(netSparse), names=F)[,2]
edge.out.col <- V(netSparse)$color[edge.start]
edge.in.col <- V(netSparse)$color[edge.end]
E(netSparse)$col.out <- edge.out.col
length(edge.out.col)
edge.out.col <- V(netSparse)$color[edge.start]
edge.end
V(netSparse)$sectors <- Sectors$Sector
V(netSparse)$sector.type <- Sectors$Sector.type
library(RColorBrewer)
col = list(color = brewer.pal(11, 'Paired'))
V(netSparse)$color <- col$color[Sectors$Sector.type]
V(netSparse)$size <- 3*log(deg.out)
# Set Edges attbs.
absWeights <- abs(E(netSparse)$weight)
E(netSparse)$weights.abs <- abs(E(netSparse)$weight)
signWeights <- E(netSparse)$weight
edge.start <- ends(netSparse, es=E(netSparse), names=F)[,1]
edge.end <- ends(netSparse, es=E(netSparse), names=F)[,2]
edge.out.col <- V(netSparse)$color[edge.start]
edge.in.col <- V(netSparse)$color[edge.end]
E(netSparse)$col.out <- edge.out.col
E(netSparse)$col.in <- edge.in.col
igraph::list.edge.attributes(netSparse)
netSparse <- delete_edges(netWeights, E(netWeights)[abs(weight) < bound])  # choose a suitable cut off
netSparse <- delete_edges(netWeights, E(netWeights)[abs(weight) < bound])  # choose a suitable cut off
igraph::list.edge.attributes(netSparse)
ecount(netSigns)
ecount(netWeights)
igraph::list.vertex.attributes(netSparse)
igraph::list.edge.attributes(netSparse)
ecount(netSigns)
ecount(netSparse)
deg.in <- igraph::degree(netSparse, mode = 'in')
deg.total <- igraph::degree(netSparse, mode = 'total')
names(info.stocks) <- c('stocks', 'sectors', 'deg.total', 'deg.out', 'deg.in')
sortedDeg <- info.stocks[order(deg.in, decreasing=T),]
ecount(netWeights)
deg.out <- igraph::degree(netSparse, mode = 'out')
info.stocks <- cbind(stockNames$FTSE100_list, Sectors[,3], data.frame(deg.total), data.frame(deg.out), data.frame(deg.in))  # avgDegree???
hubs <- sortedDeg[sortedDeg$deg.in > mean(deg.in),]
# Set Vertex attbs.
V(netSparse)$sectors <- Sectors$Sector
V(netSparse)$sector.type <- Sectors$Sector.type
library(RColorBrewer)
col = list(color = brewer.pal(11, 'Paired'))
V(netSparse)$color <- col$color[Sectors$Sector.type]
V(netSparse)$size <- 3*log(deg.out)
absWeights <- abs(E(netSparse)$weight)
# Set Edges attbs.
signWeights <- E(netSparse)$weight
E(netSparse)$weights.abs <- abs(E(netSparse)$weight)
edge.start <- ends(netSparse, es=E(netSparse), names=F)[,1]
edge.end <- ends(netSparse, es=E(netSparse), names=F)[,2]
edge.in.col <- V(netSparse)$color[edge.end]
edge.out.col <- V(netSparse)$color[edge.start]
E(netSparse)$col.out <- edge.out.col
E(netSparse)$col.in <- edge.in.col
igraph::list.edge.attributes(netSparse)
plot.igraph(netSparse, layout = kk, edge.color = edge.in.col, edge.curved=.3, edge.width= (E(netSparse)$weight)/3,
vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black', vertex.size =deg.out,
edge.arrow.size = 1, edge.arrow.width = 1,
main = 'kk -in', edge.arrow.mode = 0)
kk <- layout_with_kk(netSparse, weights = absWeights)
plot.igraph(netSparse, layout = kk, edge.color = edge.in.col, edge.curved=.3, edge.width= (E(netSparse)$weight)/3,
vertex.label=as.character(stockNames[,2]), vertex.label.color = 'black', vertex.size =deg.out,
edge.arrow.size = 1, edge.arrow.width = 1,
main = 'kk -in', edge.arrow.mode = 0)
