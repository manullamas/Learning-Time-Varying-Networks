V(netSparse[[t]])$sector.type <- Sectors$Sector.type
V(netSparse[[t]])$color <- col$color[Sectors$Sector.type]
GainLoss.order <- findInterval(GainLossMatrix[,t], sort(GainLossMatrix[,t]))
V(netSparse[[t]])$col.contagion <- pal.GLsimple[sign(GainLossMatrix[,t])+2]
V(netSparse[[t]])$col.contagion2 <- col.GL(12)[as.numeric(cut(GainLossMatrix[,t], breaks=seq(from=-max(abs(GainLossMatrix[,t])), to=max(abs(GainLossMatrix[,t])), length.out = 13)), include.lowest=TRUE)]
V(netSparse[[t]])$col.contagion.homog <- col.GL(99)[as.numeric(cut(GainLossMatrix[,t], breaks=seq(from=-max(abs(GainLossMatrix)), to=max(abs(GainLossMatrix)), length.out = 99)), include.lowest=TRUE)]
#         V(netSparse)[[t]]$col.contagion <- pal.GL(nrow(GainLossMatrix))[GainLoss.order]
#V(netSparse[[t]])$size <- 3*log(deg.out[[t]])
#V(netSparse[[t]])$hubs <-
#         V(netCorrSparse[[t]])$sectors <- Sectors$Sector
#         V(netCorrSparse[[t]])$sector.type <- Sectors$Sector.type
#         V(netCorrSparse[[t]])$color <- col$color[Sectors$Sector.type]
#
### Edges
E(netSparse[[t]])$weights.abs <- abs(E(netSparse[[t]])$weight) ### absWeights
edge.col.out[[t]] <- V(netSparse[[t]])$color[edge.start[[t]]]
edge.col.in[[t]] <- V(netSparse[[t]])$color[edge.end[[t]]]
edge.sector.out[[t]] <- Sectors$Sector[edge.start[[t]]]
edge.sector.in [[t]] <- Sectors$Sector[edge.end[[t]]]
E(netSparse[[t]])$col.out <- edge.col.out[[t]]
E(netSparse[[t]])$col.in <- edge.col.in[[t]]
edge.col.contagion <- V(netSparse[[t]])$col.contagion[edge.start[[t]]]
E(netSparse[[t]])$col.contagion <- edge.col.contagion
edge.col.contagion2 <- V(netSparse[[t]])$col.contagion2[edge.start[[t]]]
E(netSparse[[t]])$col.contagion2 <- edge.col.contagion2
edge.col.contagion.homog <- V(netSparse[[t]])$col.contagion.homog[edge.start[[t]]]
E(netSparse[[t]])$col.contagion.homog <- edge.col.contagion.homog
#         E(netCorrSparse[[t]])$weights.abs <- abs(E(netCorrSparse[[t]])$weight) ### absWeights
#           edge.col.out.C[[t]] <- V(netCorrSparse[[t]])$color[edge.start.C[[t]]]
#           edge.col.in.C[[t]] <- V(netCorrSparse[[t]])$color[edge.end.C[[t]]]
#         E(netCorrSparse[[t]])$col.out <- edge.col.out.C[[t]]
#         E(netCorrSparse[[t]])$col.in <- edge.col.in.C[[t]]
weights.out <- data.frame(matrix(ncol=1, nrow=nStocks))
weights.in <- data.frame(matrix(ncol=1, nrow=nStocks))
weights.corr <- data.frame(matrix(ncol=1, nrow=nStocks))
#         weights.out.C <- data.frame(matrix(ncol=1, nrow=nStocks))
#         weights.in.C <- data.frame(matrix(ncol=1, nrow=nStocks))
for (n in 1:nStocks){
weights.out[n,1] <- c(info.stocks$stocks[n], sum(weights[[t]][edge.start[[t]] == n]))
weights.in[n,1] <- c(info.stocks$stocks[n], sum(weights[[t]][edge.end[[t]] == n]))
weights.corr[n,1] <- c(info.stocks$stocks[n], sum(weights.C[[t]][edge.start[[t]] == n]))
}
info.stocks[[t]] <- cbind(info.stocks[[t]], weights.out, weights.in, weights.corr)
names(info.stocks[[t]]) <- c('stocks', 'sector.type', 'sectors', 'deg.total', 'deg.out', 'deg.in', 'deg.corr', 'weights.out', 'weights.in', 'weights.corr')
### Layouts
TESLA.fr[[t]] <- layout_with_fr(netSparse[[t]])#, weights = Weights[[t]])
Reingold[[t]] <- layout.reingold.tilford(netSparse[[t]], circular=T)
TESLA.fr.grid[[t]] <- layout_with_fr(netSparse[[t]], grid='grid')
TESLA.kk.abs[[t]] <- layout_with_kk(netSparse[[t]], weights = absWeights[[t]])
#kk3[[t]] <- layout_with_kk(netSparse[[t]], weights = absWeights[[t]], dim = 3)
TESLA.MDS[[t]] <- layout_with_mds(netSparse[[t]])
# TESLA.MDSdist[[t]] <- layout_with_mds(netSparse[[t]], dist = as.matrix(distMatrices[[t]]))
TESLA.MDScorr[[t]] <- layout_with_mds(netSparse[[t]], dist = as.matrix(corrMatrices[[t]]))
#         TESLA.lgl[[t]] <- layout_with_lgl(netSparse[[t]])
#         TESLA.lgl2[[t]] <- layout_with_lgl(netSparse[[t]], maxiter=150, maxdelta=nStocks, area=nStocks^2, repulserad=nStocks^4)
#         TESLA.drl[[t]] <- layout_with_drl(netSparse[[t]])
#         fr_grid[[t]] <-
#         CORR.fr[[t]] <- layout_with_fr(netCorrSparse[[t]])#, weights = Weights[[t]])
#         CORR.fr.abs[[t]] <- layout_with_fr(netCorrSparse[[t]], weights = absWeights.C[[t]])
#         CORR.kk.abs[[t]] <- layout_with_kk(netCorrSparse[[t]], weights = absWeights.C[[t]])
#         CORR.MDS[[t]] <- layout_with_mds(netCorrSparse[[t]])
#         CORR.MDSdist[[t]] <- layout_with_mds(netCorrSparse[[t]], dist = as.matrix(distMatrices[[t]]))
}
####################################################################################################################
####################################################################################################################
####################################################################################################################
############################
######    ANALYSIS    ######
############################
# Create analysis variables
# info.stocks <- cbind(stockNames$FTSE100_list, Sectors[,3], data.frame(deg.total), data.frame(deg.out), data.frame(deg.in))  # avgDegree???
# names(info.stocks) <- c('stocks', 'sectors', 'deg.total', 'deg.out', 'deg.in')
maxValues <- lapply(weightedMatrices, function(x) max(x))
minValues <- lapply(weightedMatrices, function(x) min(x))
means <- lapply(weightedMatrices, function(x) mean(as.matrix(x)))
sds <- lapply(weightedMatrices, function(x) sd(as.matrix(x)))
info.epochs <- cbind(1:T, maxValues, minValues, means, sds)
# matplot(info.stocks, type = c("b"), pch=1, col = 1:3, main = 'Network degrees')
# text(1:nStocks, info.stocks$deg.total, labels = info.stocks$stocks, col = col$color[Sectors$Sector.type])
# legend(x = 60, y = 95, legend = c('deg.out','deg.in','deg.total'), col=1:3, pch=1, pt.cex=2, cex=.8, ncol=1, y.intersp = 0.2)
###  cent <- lapply(netSparse, function(x) centralization.degree(x)$centralization)
# plot(1:length(maxValues), unlist(maxValues), xlab='epoch', ylab='weight', main='Max Weights')
# plot(1:length(minValues), unlist(minValues), xlab='epoch', ylab='weight', main='Min Weights')
# plot(1:length(means), unlist(means), xlab='epoch', ylab='weight', main='mean weights')
#---------------------#
# ANALYSIS BY SECTORS #
#---------------------#
sectors.degOut <- lapply(info.stocks, function(x) aggregate(x$deg.out, by=list(Category=x$sectors), FUN=sum))
sectors.degIn <- lapply(info.stocks, function(x) aggregate(x$deg.in, by=list(Category=x$sectors), FUN=sum))
sectors.weightOut <- lapply(info.stocks, function(x) aggregate(x$weights.out, by=list(Category=x$sectors), FUN=sum))
sectors.weightIn <- lapply(info.stocks, function(x) aggregate(x$weights.in, by=list(Category=x$sectors), FUN=sum))
info.sectors <- list()
for (t in 1:T) {
info.sectors[[t]] <- cbind(sectors.degOut[[t]], sectors.degIn[[t]]$x, sectors.weightOut[[t]]$x, sectors.weightIn[[t]]$x)
names(info.sectors[[t]]) <- c('sector', 'deg.out', 'deg.in', 'weight.out', 'weight.in')
}
ids <- info.stocks[[1]]$sectors
countSect <- data.frame(table(ids))
sectors <- list()
for (n in seq_along(sectors.degOut[[t]]$Category)) {
sectors[[n]] <- data.frame(matrix(ncol=11, nrow=T))
for (t in 1:T) {
sectors[[n]][t,] <- c(t, sectors.degOut[[t]]$x[n], sectors.degIn[[t]]$x[n], sectors.weightOut[[t]]$x[n], sectors.weightOut[[t]]$x[n]/countSect[n,2], sectors.weightOut[[t]]$x[n]/sectors.degOut[[t]]$x[n], sectors.weightIn[[t]]$x[n], sectors.weightIn[[t]]$x[n]/countSect[n,2], sectors.weightIn[[t]]$x[n]/sectors.degOut[[t]]$x[n],sectors.degOut[[t]]$x[n]/countSect$Freq[n], sectors.degIn[[t]]$x[n]/countSect$Freq[n])
names(sectors[[n]]) <- c('epoch', 'deg.out', 'deg.in', 'weight.out', 'avg.weight.out.links', 'avg.weight.out.edges','weight.in', 'avg.weight.in.links', 'avg.weight.in.edges', 'meanDeg.out', 'meanDeg.in')
}
}
names(sectors) <- info.sectors[[1]]$sector
#     ggplot(info.sectors[[t]], aes(x = sector, y = deg.in, fill = sector)) + geom_bar(stat = 'identity') +
#       theme(axis.text.x = element_text(angle = 90)) + coord_flip() +
#       theme_bw() + labs(x = '', y = 'Degree In') + ggtitle('Degree by Sectors')
#       + theme(legend.position="none", axis.text.y = element_text(face=NULL, size=6, angle=0))
#     ggplot(info.sectors[[t]], aes(x = sector, y = deg.out, fill = sector)) + geom_bar(stat = 'identity') +
#       theme(axis.text.x = element_text(angle = 90)) + coord_flip() +
#       theme_bw() + labs(x = '', y = 'Degree Out') + ggtitle('Degree by Sectors')
#       + theme(legend.position="none", axis.text.y = element_text(face=NULL, size=6, angle=0))
#     ggplot(info.sectors[[t]], aes(x = sector, y = weight.in, fill = sector)) + geom_bar(stat = 'identity') +
#       theme(axis.text.x = element_text(angle = 90)) + coord_flip() +
#       theme_bw() + labs(x = '', y = 'Weights In') + ggtitle('Weights by Sectors')
#       + theme(legend.position="none", axis.text.y = element_text(face=NULL, size=6, angle=0))
#     ggplot(info.sectors[[t]], aes(x = sector, y = weight.out, fill = sector)) + geom_bar(stat = 'identity') +
#       theme(axis.text.x = element_text(angle = 90)) + coord_flip() +
#       theme_bw() + labs(x = '', y = 'Weights Out') + ggtitle('Weights by Sectors')
#       + theme(legend.position="none", axis.text.y = element_text(face=NULL, size=6, angle=0))
#
#------------------------------------------------------------------------------------------
#-------------------------------#
# ANALYSIS OF INDIVIDUAL STOCKS #
#-------------------------------#
op <- par()
# on.exit(par(op))
# distribution of plots in a grid
# par(mfrow=c(2,2), mar=c(0,0,0,0))
library(ggplot2)
library(grid)
source("C:/Users/Manuel/Desktop/Southampton/MasterThesis/Code/multiplot.R")
source("C:/Users/Manuel/Desktop/Southampton/MasterThesis/Code/gg_color_hue.R")
pdf("Analysis_plots.pdf")
for (t in seq_along(netSparse)) {
h1 <- qplot(deg.in[[t]],
geom="histogram",
binwidth = 1,
main = paste0('t = ',t),
xlab = "Deg.in")
h2 <- qplot(weights[[t]],
geom="histogram",
binwidth = 0.2,
xlab = "Weights") +
geom_vline(data=hubs.in[[t]], aes(xintercept=avg.weight.in), color='red', show.legend=TRUE) +
geom_text(aes(hubs.in[[t]]$avg.weight.in, 200 ,label = hubs.in[[t]]$stocks, vjust=1, hjust=0))
#main = paste0('t = ',t),
#fill=I("blue"),
#col=I("red"),
#alpha=I(.2)
#text(1:nStocks, deg.in[[t]]+2, labels = Sectors$x, col = 'black')
dIn <-   ggplot(info.stocks[[t]], aes(x = reorder(stocks, as.numeric(sectors)),
y = deg.in, fill = sectors)) + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90)) + coord_flip() +
theme_bw() + labs(x = '', y = 'Degree In') + theme(legend.position="none",
axis.text.y =element_blank()) +  ###element_text(face=NULL, size=6, angle=0)) +
geom_text(aes(label = reorder(stocks, as.numeric(sectors))), size = 3)
dOut <-   ggplot(info.stocks[[t]], aes(x = reorder(stocks, as.numeric(sectors)),
y = deg.out, fill = sectors)) + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90)) + coord_flip() +
theme_bw() + labs(x = '', y = 'Degree Out') + theme(legend.position="none",
axis.text.y =element_blank()) +
geom_text(aes(label = reorder(stocks, as.numeric(sectors))), size = 3)
wIn <-   ggplot(info.stocks[[t]], aes(x = reorder(stocks, as.numeric(sectors)),
y = weights.in, fill = sectors)) + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90)) + coord_flip() +
theme_bw() + labs(x = '', y = 'Weights In') + theme(legend.position="none",
axis.text.y =element_blank()) +
geom_text(aes(label = reorder(stocks, as.numeric(sectors))), size = 3)
wOut <-   ggplot(data= info.stocks[[t]], aes(x = reorder(stocks, as.numeric(sectors)),
y = weights.out, fill = sectors)) + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90)) + coord_flip() +
theme_bw() + labs(x = '', y = 'Weights Out') + theme(legend.position="none",
axis.text.y =element_blank()) +
geom_text(aes(label = reorder(stocks, as.numeric(sectors))), size = 3)
dSin <-   ggplot(info.sectors[[t]], aes(x = sector, y = deg.in, fill = sector)) + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90)) + coord_flip() +
theme_bw() + labs(x = '', y = 'Degree In') + ggtitle('Degree by Sectors') +
theme(legend.position="none")
dSout <-  ggplot(info.sectors[[t]], aes(x = sector, y = deg.out, fill = sector)) + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90)) + coord_flip() +
theme_bw() + labs(x = '', y = 'Degree Out') + ggtitle('Degree by Sectors') +
theme(legend.position="none")
wSin <-   ggplot(info.sectors[[t]], aes(x = sector, y = weight.in, fill = sector)) + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90)) + coord_flip() +
theme_bw() + labs(x = '', y = 'Weights In') + ggtitle('') +
theme(legend.position="none")
wSout <-  ggplot(info.sectors[[t]], aes(x = sector, y = weight.out, fill = sector)) + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90)) + coord_flip() +
theme_bw() + labs(x = '', y = 'Weights Out') + ggtitle('') +
theme(legend.position="none")
multiplot(h1, h2) # , layout = as.matrix(c(1,2,3,3), nrow=2, byrow=TRUE))
multiplot(dIn, dOut, dSin, dSout, cols = 2)
multiplot(wIn, wOut, wSin, wSout, cols = 2)
}
dev.off()
#------------------------------------------------------------------------------------------
### create   info.epochs <- cbind(1:T, maxValues, minValues, means, sds) dataframe (as info.sto)
#--------------------------------#
# ANALYSIS OF THE GLOBAL NETWORK #
#--------------------------------#
pdf('AnalysisOverTime.pdf')
### Plot: avg Degree Out of the sectors and network over time
sumDeg.out <- sapply(info.stocks, function(x) sum(x$deg.out))
meanDeg.out <- sapply(info.stocks, function(x) mean(x$deg.out))
sdsDeg.out <- sapply(info.stocks, function(x) sd(x$deg.out))
meanWeight.out <- sapply(info.stocks, function(x) mean(x$weights.out))
sdsWeight.out <- sapply(info.stocks, function(x) sd(x$weights.out))
dfDeg <- data.frame(cbind(1:T, sumDeg.out, meanDeg.out, sdsDeg.out, meanWeight.out, sdsWeight.out))
names(dfDeg) <- c('epoch', 'sumDeg.out', 'meanDeg.out', 'sdsDeg.out', 'meanWeight.out', 'sdsWeight.out')
pl1 <- ggplot(data=dfDeg, aes(x=epoch, y=meanDeg.out), colour='black') + geom_errorbar(aes(ymin=meanDeg.out-sdsDeg.out, ymax=meanDeg.out+sdsDeg.out), width=0.25) +
geom_line() + geom_point() + ggtitle('Average Out Degree') + ylab('Avg. Degree')
df <- cbind(sector=rep(names(sectors),sapply(sectors,nrow)),do.call(rbind,sectors))
ggplot() + geom_line(data=df, aes(x=epoch,y=meanDeg.out, color=sector)) + scale_colour_hue(c=45, l=80) + ggtitle('Mean Degree Out per Stock') + ylab('Degree Out')
ggplot() + geom_line(data=df, aes(x=epoch,y=meanDeg.in, color=sector)) + scale_colour_hue(c=45, l=80) + ggtitle('Mean Degree In per Stock') + ylab('DegreeIn')
### Plot: variation of Weights Out of the sectors and network over time
#         pl2 <- ggplot(data=dfDeg, aes(x=epoch, y=meanWeight.out), colour='black') + geom_errorbar(aes(ymin=meanWeight.out-sdsWeight.out, ymax=meanWeight.out+sdsWeight.out), width=0.25) +
#             geom_line() + geom_point() + ggtitle('Average Out Weight') + ylab('Avg. Weight')
ggplot() +geom_line(data=df, aes(x=epoch,y=avg.weight.out.links, color=sector)) + #scale_colour_hue(c=45, l=80) +
ggtitle('Avg. Weight Out per stock')
ggplot() + geom_line(data=df, aes(x=epoch,y=avg.weight.out.edges, color=sector)) + #scale_colour_hue(c=45, l=80) +
ggtitle('Avg. weight per edge')
ggplot() + geom_line(data=df, aes(x=epoch,y=weight.out, color=sector)) + #scale_colour_hue(c=45, l=80) +
ggtitle('Total Weight Out')
ggplot() + geom_line(data=df, aes(x=epoch,y=weight.in, color=sector)) + #scale_colour_hue(c=45, l=80)
ggtitle('Total Weight In')
ggplot() + geom_line(data=df, aes(x=epoch,y=avg.weight.in.links, color=sector)) + #scale_colour_hue(c=45, l=80) +
ggtitle('Avg. Weight In per Stock')
ggplot() + geom_line(data=df, aes(x=epoch,y=avg.weight.in.edges, color=sector)) + #scale_colour_hue(c=45, l=80) +
ggtitle('Avg. Weight In per edge')
dev.off()
### Heatmap: Sectors relationships
library(plyr)
edges.info <- list()
sectConnectivity <- list()
for (t in 1:T) {
edges.info[[t]] <- cbind(data.frame(edge.start[[t]], as.character(info.stocks[[t]]$stocks[edge.start[[t]]]), info.stocks[[t]]$sectors[edge.start[[t]]], info.stocks[[t]]$sector.type[edge.start[[t]]], edge.end[[t]], info.stocks[[t]]$stocks[edge.end[[t]]], info.stocks[[t]]$sectors[edge.end[[t]]], info.stocks[[t]]$sector.type[edge.end[[t]]]))
names(edges.info[[t]]) <- c('edge.start', 'stock.start', 'sector.start', 'sectorType.start', 'edge.end', 'stock.end', 'sector.end', 'sectorType.end')
links <- count(edges.info[[t]],vars = c("sectorType.start","sectorType.end"))
totalEdges <- nrow(edges.info[[1]])
sectConnectivity[[t]] <- data.frame(matrix(ncol=nSectors,nrow=nSectors))
for (n in 1:nSectors) {
for (m in 1:nSectors) {
freq <- subset(links, sectorType.start==n & sectorType.end==m)$freq
if (length(freq)==0) {
sectConnectivity[[t]][n,m] <- 0
} else if (length(freq)==1) {
sectConnectivity[[t]][n,m] <- subset(links, sectorType.start==n & sectorType.end==m)$freq
}
}
}
names(sectConnectivity[[t]]) <- c('Materials', 'Consumer Staples', 'Financials', 'Energy', 'Health Care', 'Industrials', 'Consumers Discretionary', 'Communications', 'Utilities', 'Technology', 'Containers & Packaging')
row.names(sectConnectivity[[t]]) <- c('Materials', 'Consumer Staples', 'Financials', 'Energy', 'Health Care', 'Industrials', 'Consumers Discretionary', 'Communications', 'Utilities', 'Technology', 'Containers & Packaging')
sectConnectivity[[t]] <- as.matrix(sectConnectivity[[t]])
}
pdf('sectorConnectivity.pdf')
palf <- colorRampPalette(c('white', 'dark blue'))
for (t in 1:T) {
heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
#legend("left", fill = palf(10))
}
dev.off()
#       sectors2 <- list()
#       sectors2 <- sectors
#       sectors2[[12]] <- dfDeg
#       names(sectors2)<- c(names(sectors), 'network')
#       pDegEpochNorm <- ggplot() + geom_line(data=df, aes(x=epoch,y=deg.out.norm, color=sector))
#
# put all in the same dataframe to group by id of list!
links
### Heatmap: Sectors relationships
library(plyr)
edges.info <- list()
sectConnectivity <- list()
for (t in 1:T) {
edges.info[[t]] <- cbind(data.frame(edge.start[[t]], as.character(info.stocks[[t]]$stocks[edge.start[[t]]]), info.stocks[[t]]$sectors[edge.start[[t]]], info.stocks[[t]]$sector.type[edge.start[[t]]], edge.end[[t]], info.stocks[[t]]$stocks[edge.end[[t]]], info.stocks[[t]]$sectors[edge.end[[t]]], info.stocks[[t]]$sector.type[edge.end[[t]]]))
names(edges.info[[t]]) <- c('edge.start', 'stock.start', 'sector.start', 'sectorType.start', 'edge.end', 'stock.end', 'sector.end', 'sectorType.end')
links <- count(edges.info[[t]],vars = c("sectorType.start","sectorType.end"))
totalEdges <- nrow(edges.info[[1]])
sectConnectivity[[t]] <- data.frame(matrix(ncol=nSectors,nrow=nSectors))
for (n in 1:nSectors) {
for (m in 1:nSectors) {
freq <- subset(links, sectorType.start==n & sectorType.end==m)$freq
if (length(freq)==0) {
sectConnectivity[[t]][n,m] <- 0
} else if (length(freq)==1) {
sectConnectivity[[t]][n,m] <- subset(links, sectorType.start==n & sectorType.end==m)$freq
}
}
}
names(sectConnectivity[[t]]) <- c('Communications', 'Consumer Staples', 'Consumers Discretionary', 'Energy', 'Financials', 'Health Care', 'Industrials', 'Materials', 'Technology', 'Utilities')
row.names(sectConnectivity[[t]]) <- c('Communications', 'Consumer Staples', 'Consumers Discretionary', 'Energy', 'Financials', 'Health Care', 'Industrials', 'Materials', 'Technology', 'Utilities')
sectConnectivity[[t]] <- as.matrix(sectConnectivity[[t]])
}
pdf('sectorConnectivity.pdf')
palf <- colorRampPalette(c('white', 'dark blue'))
for (t in 1:T) {
heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
#legend("left", fill = palf(10))
}
dev.off()
#       sectors2 <- list()
#       sectors2 <- sectors
#       sectors2[[12]] <- dfDeg
#       names(sectors2)<- c(names(sectors), 'network')
#       pDegEpochNorm <- ggplot() + geom_line(data=df, aes(x=epoch,y=deg.out.norm, color=sector))
#
# put all in the same dataframe to group by id of list!
sectConnectivity[[t]]
?heatmap
sectConnectivity[[t]]
library(reshape2)
melted_sectCon <- melt(sectConnectivity[[t]])
View(melted_sectCon)
?melt
sectConnectivity[[t]]
View(melted_sectCon)
class(sectConnectivity[[1]])
ppp <- sectConnectivity[[t]]
ppp
ppp <- ppp[5:10, ]
ppp
ppp <- ppp[3:5,]
ppp
melt(ppp)
View(melted_sectCon)
View(melted_sectCon)
p <- melt(ppp)
View(p)
heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
ggplot(melted_sectCon, aes(variable, Name)) + geom_tile(aes(fill = rescale),  +     colour = "white") + scale_fill_gradient(low = "white",+     high = "steelblue"))
gplot(melted_sectCon, aes(variable, Name)) + geom_tile(aes(fill = rescale), colour = "white") + scale_fill_gradient(low = "white", high = "steelblue"))
ggplot(melted_sectCon, aes(variable, Name)) + geom_tile(aes(fill = rescale), colour = "white") + scale_fill_gradient(low = "white", high = "steelblue")
View(melted_sectCon)
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") + scale_fill_gradient(low = "white", high = "steelblue")
heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") + scale_fill_gradient(low = "white", high = "steelblue")
heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") + scale_fill_gradient(low = "white", high = "steelblue")
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors')
heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors')
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
library(plyr)
edges.info <- list()
sectConnectivity <- list()
for (t in 1:T) {
edges.info[[t]] <- cbind(data.frame(edge.start[[t]], as.character(info.stocks[[t]]$stocks[edge.start[[t]]]), info.stocks[[t]]$sectors[edge.start[[t]]], info.stocks[[t]]$sector.type[edge.start[[t]]], edge.end[[t]], info.stocks[[t]]$stocks[edge.end[[t]]], info.stocks[[t]]$sectors[edge.end[[t]]], info.stocks[[t]]$sector.type[edge.end[[t]]]))
names(edges.info[[t]]) <- c('edge.start', 'stock.start', 'sector.start', 'sectorType.start', 'edge.end', 'stock.end', 'sector.end', 'sectorType.end')
links <- count(edges.info[[t]],vars = c("sectorType.start","sectorType.end"))
totalEdges <- nrow(edges.info[[1]])
sectConnectivity[[t]] <- data.frame(matrix(ncol=nSectors,nrow=nSectors))
for (n in 1:nSectors) {
for (m in 1:nSectors) {
freq <- subset(links, sectorType.start==n & sectorType.end==m)$freq
if (length(freq)==0) {
sectConnectivity[[t]][n,m] <- 0
} else if (length(freq)==1) {
sectConnectivity[[t]][n,m] <- subset(links, sectorType.start==n & sectorType.end==m)$freq
}
}
}
names(sectConnectivity[[t]]) <- c('Communications', 'Consumer Staples', 'Consumers Discretionary', 'Energy', 'Financials', 'Health Care', 'Industrials', 'Materials', 'Technology', 'Utilities')
row.names(sectConnectivity[[t]]) <- c('Communications', 'Consumer Staples', 'Consumers Discretionary', 'Energy', 'Financials', 'Health Care', 'Industrials', 'Materials', 'Technology', 'Utilities')
sectConnectivity[[t]] <- as.matrix(sectConnectivity[[t]])
}
pdf('sectorConnectivity.pdf')
library(reshape2)
#         palf <- colorRampPalette(c('white', 'dark blue'))
for (t in 1:T) {
#           heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
melted_sectCon <- melt(sectConnectivity[[t]])
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
####### same plot with weights??
}
dev.off()
dev.off()
t
pdf('sectorConnectivity.pdf')
library(reshape2)
#         palf <- colorRampPalette(c('white', 'dark blue'))
for (t in 1:T) {
#           heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
melted_sectCon <- melt(sectConnectivity[[t]])
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
####### same plot with weights??
}
dev.off()
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
t=1
melted_sectCon <- melt(sectConnectivity[[t]])
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
melted_sectCon <- melt(sectConnectivity[[t]])
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
for (t in 1:T) {
#           heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
melted_sectCon <- melt(sectConnectivity[[t]])
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
####### same plot with weights??
}
dev.off()
()
dev.off()
pdf('sectorConnectivity.pdf')
library(reshape2)
#         palf <- colorRampPalette(c('white', 'dark blue'))
for (t in 1:T) {
#           heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
melted_sectCon <- melt(sectConnectivity[[t]])
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
####### same plot with weights??
}
dev.off()
for (t in 1:T) {
#           heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
melted_sectCon <- melt(sectConnectivity[[t]])
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
####### same plot with weights??
}
dev.off()
for (t in 1:T) {
#           heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
melted_sectCon <- melt(sectConnectivity[[t]])
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
####### same plot with weights??
}
melted_sectCon <- melt(sectConnectivity[[t]])
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
pdf('sectorConnectivity.pdf')
library(reshape2)
#         palf <- colorRampPalette(c('white', 'dark blue'))
for (t in 1:T) {
#           heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
melted_sectCon <- melt(sectConnectivity[[t]])
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
####### same plot with weights??
}
dev.off()
dev.off()
pdf('sectorConnectivity.pdf')
for (t in 1:T) {
heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
}
dev.off()
pdf('sectorConnectivity.pdf')
library(reshape2)
#         palf <- colorRampPalette(c('white', 'dark blue'))
for (t in 1:T) {
heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
melted_sectCon <- melt(sectConnectivity[[t]])
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
####### same plot with weights??
}
dev.off()
pdf('sectorConnectivity.pdf')
library(reshape2)
#         palf <- colorRampPalette(c('white', 'dark blue'))
for (t in 1:T) {
heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
melted_sectCon <- melt(sectConnectivity[[t]])
ggplot(melted_sectCon, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
####### same plot with weights??
}
dev.off()
pdf('sectorConnectivity.pdf')
library(reshape2)
#         palf <- colorRampPalette(c('white', 'dark blue'))
melted_sectCon <- list()
for (t in 1:T) {
#            heatmap(sectConnectivity[[t]], Rowv = NA, Colv = NA, col = palf(10), scale="none", margins=c(10,10), ylab='Edge Start', xlab='Edge End', main= paste0('t = ', t))
melted_sectCon[[t]] <- melt(sectConnectivity[[t]])
ggplot(melted_sectCon[[t]], aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ggtitle('Links between Sectors') + ylab('Edge end') + xlab('Edge start')
####### same plot with weights??
}
dev.off()
