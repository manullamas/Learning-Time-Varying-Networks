# Extra Credit - what code would you write in R
# to get the directed versions of eigenvector centrality?
#####
# To get the summary table, we'll construct a data frame with
# the vertices as rows and the centrality scores as columns.
#
# Note that the vertex IDs are NOT the same as the first column
# of row numbers. This is because we previously removed isolates.
central_social <- data.frame(V(s641_social)$name, indegree_social, outdegree_social, incloseness_social, outcloseness_social, betweenness_social, eigen_social)
central_social
# Now we'll examine the table to find the most central actors
# according to the different measures we have. When looking at
# each of these measures, it's a good idea to have your plot on
# hand so you can sanity-check the results.
plot(s641_social, vertex.size=10, vertex.label=V(s641_social)$name,
edge.arrow.size = 0.5, layout=layout.fruchterman.reingold,main='')
# Show table sorted by decreasing indegree. The order() function
# returns a vector in ascending order; the minus sign flips it
# to be descending order. Top actors are 18, 22 and 16.
central_social[order(-central_social$indegree_social),]
# Outdegree: 22, 18 and 19.
central_social[order(-central_social$outdegree_social),]
# In-closeness: 11, 15 and 18.
# NOTE: For some reason, this operation returns strange values;
# a visual inspection of the plot suggests that 11, 15, and 18
# are not central actors at all. This could be a bug.
central_social[order(-central_social$incloseness_social),]
# Out-closeness: 22, 16, and 19
central_social[order(-central_social$outcloseness_social),]
# Eigenvector: 18, 19, and 16
central_social[order(-central_social$eigen_social),]
# let's make a plot or two with these summary statistics
# To visualize these data, we can create a barplot for each
# centrality measure. In all cases, the y-axis is the value of
# each category and the x-axis is the node number.
barplot(central_social$indegree_social, names.arg=central_social$V.s641_social..name, main='inDeg')
barplot(central_social$outdegree_social, names.arg=central_social$V.s641_social..name, main='outDeg')
barplot(central_social$incloseness_social, names.arg=central_social$V.s641_social..name, main='inCloseness')
barplot(central_social$outcloseness_social, names.arg=central_social$V.s641_social..name, main='outCloseness')
barplot(central_social$betweenness_social, names.arg=central_social$V.s641_social..name, main='betweenness')
barplot(central_social$eigen_social, names.arg=central_social$V.s641_social..name, main='eigencentrality')
# Question #2 - What can we say about the social actors if we compare the bar plots?
# Who seems to run the show in sociable affairs? Who seems to bridge sociable conversations?
###
# 4. CORRELATIONS BETWEEN CENTRALITY MEASURES
###
# Now we'll compute correlations betwee the columns to determine
# how closely these measures of centrality are interrelated.
# Generate a table of pairwise correlations.
cor(central_social[,2:7])
# INTERPRETATION:
#
# Indegree and outdegree are very closely correlated (rho = 0.95),
# indicating that social talk with others is reciprocated (i.e.,
# if you talk to others, they tend to talk back to you).
#
# The same is not true of incloseness and outcloseness (rho =
# 0.38), indicating that the closeness calculated from inbound
# paths is not strongly associated with with closeness from
# outbound paths.
#
# In- and out-degree are highly correlated with eigenvector
# centrality, indicating that the students that talk the most to
# others (or, relatedly, are talked to the most by others) are
# also the ones that are connected to other highly connected
# students -- possibly indicating high density cliques around
# these individuals.
#
# Betweennes shows the highest corelation with outdegree, follwed
# by indegree. In the case of this particular network, it seems
# that the individuals that talk to the most others are the
# likeliest to serve as bridges between the particular cliques
# (see, e.g., 22 in the plot).
s641_task <- net.neg
indegree_task <- igraph::degree(s641_task, mode='in')
outdegree_task <- igraph::degree(s641_task, mode='out')
incloseness_task <- igraph::closeness(s641_task, mode='in')
outcloseness_task <- igraph::closeness(s641_task, mode='out')
betweenness_task <- igraph::betweenness(s641_task)
s641_task
E(s641_task)$weight
betweenness_task <- igraph::betweenness(s641_task)
betweenness_task <- igraph::betweenness(s641_task)
s641_task_undirected <- as.undirected(s641_task, mode='collapse')
ev_obj_task <- igraph::evcent(s641_task_undirected)
eigen_task <-ev_obj_task$vector
central_task <- data.frame(V(s641_task)$name, indegree_task, outdegree_task, incloseness_task, outcloseness_task, betweenness_task, eigen_task)
betweenness_task <- igraph::betweenness(s641_task)
central_task <- data.frame(V(s641_task)$name, indegree_task, outdegree_task, incloseness_task, outcloseness_task, betweenness_social, eigen_task)
central_task[order(-central_task$indegree_task),]
barplot(central_task$indegree_task, names.arg=central_task$V.s641_task..name)
barplot(central_task$outdegree_task, names.arg=central_task$V.s641_task..name)
barplot(central_task$incloseness_task, names.arg=central_task$V.s641_task..name)
barplot(central_task$outcloseness_task, names.arg=central_task$V.s641_task..name)
barplot(central_task$betweenness_task, names.arg=central_task$V.s641_task..name)
barplot(central_task$eigen_task, names.arg=central_task$V.s641_task..name)
barplot(central_social$indegree_social, names.arg=central_social$V.s641_social..name, main='inDeg')
barplot(central_social$outdegree_social, names.arg=central_social$V.s641_social..name, main='outDeg')
barplot(central_social$incloseness_social, names.arg=central_social$V.s641_social..name, main='inCloseness')
barplot(central_social$betweenness_social, names.arg=central_social$V.s641_social..name, main='betweenness')
barplot(central_social$eigen_social, names.arg=central_social$V.s641_social..name, main='eigencentrality')
connectednodes_social = as.numeric(levels(central_social$V.s641_social..name))[central_social$V.s641_social..name]
connectednodes_task = as.numeric(levels(central_task$V.s641_task..name))[central_task$V.s641_task..name]
length(connectednodes_social)
length(connectednodes_task)
cor(central_social[which(connectednodes_social %in% connectednodes_task),2:7], central_task[which(connectednodes_task %in% connectednodes_social),2:7])
net.pos <- netSparse[[1]]
E(net.pos)[E(net.pos)$weight<0] <- 0
# E(net.pos)$weight[E(net.pos)$weight<0] <- 0
net.neg <- netSparse[[1]]
E(net.neg)[E(net.neg)$weight>0] <- 0
str(E(net.pos))
delete.edges(net.pos, E(net.pos)$weight[E(net.pos)$weight<0] <- 0)
delete.edges(net.pos, E(net.pos)$weight[E(net.pos)$weight<0])
net.pos <- netSparse[[1]]
delete.edges(net.pos, E(net.pos)$weight[E(net.pos)$weight<0])
net.pos <- netSparse[[1]]
delete.edges(net.pos, E(net.pos)$weight[E(net.pos)$weight<0])
class(net.neg)
net.neg
delete.edges(net.pos, E(net.pos)$weight[E(net.pos)$weight<0])
net.neg <- netSparse[[1]]
delete.edges(net.neg, E(net.neg)$weight[E(net.neg)$weight>0])
class(net.neg)
net.neg
delete.edges(net.pos, E(net.pos)$weight[E(net.pos)$weight<0])
E(net.pos)$weight[E(net.pos)$weight<0]
gpos <- subgraph.edges(graph=netSparse[[1]], eids=which(E(netSparse[[1]])$weight>0), delete.vertices = FALSE)
gneg <- subgraph.edges(graph=netSparse[[1]], eids=which(E(netSparse[[1]])$weight<0), delete.vertices = FALSE)
gpos <- subgraph.edges(graph=netSparse[[1]], eids=which(E(netSparse[[1]])$weight>0), delete.vertices = FALSE)
gneg <- subgraph.edges(graph=netSparse[[1]], eids=which(E(netSparse[[1]])$weight<0), delete.vertices = FALSE)
s641_social <- gpos
indegree_social <- igraph::degree(s641_social, mode='in')
indegree_social
# Outdegree centrality measures how many people the actor directs
# social talk to.
outdegree_social <- igraph::degree(s641_social, mode='out')
outdegree_social
# Closeness is the mean geodesic distance between a given node and
# all other nodes with paths from the given node to the other
# node. This is close to being the mean shortest path, but
# geodesic distances give higher values for more central nodes.
#
# In a directed network, we can think of in-closeness centrality
# as the average number of steps one would have to go through to
# get TO a given node FROM all other reachable nodes in the
# network. Out-closeness centrality, not surprisingly, measures
# the same thing with the directionality reversed.
# In-closeness centrality
incloseness_social <- igraph::closeness(s641_social, mode='in')
incloseness_social
# Out-closeness
outcloseness_social <- igraph::closeness(s641_social, mode='out')
outcloseness_social
# Betweenness centrality measures the number of shortest paths
# going through a specific vertex; it is returned by the
# betweenness() function. (Recall that in the previous lab we used
# a related measure called edge betweenness, which is returned by
# the edge.betweenness() function.)
betweenness_social <- igraph::betweenness(s641_social)
betweenness_social
# Eigenvector centrality gives greater weight to a node the more
# it is connected to other highly connected nodes. A node
# connected to five high-scoring nodes will have higher
# eigenvector centrality than a node connected to five low-scoring
# nodes. Thus, it is often interpreted as measuring a node's
# network importance.
#
# In directed networks, there are 'In' and 'Out' versions. In
# information flow studies, for instance, In-Eigenvector scores
# would reflect which nodes are high on receiving information,
# while Out-Eigenvector scores would reflect which nodes are high
# on broadcasting information.
#
# For these data, we will simply symmetrize to generate an
# undirected eigenvector centrality score.
#
# Note that, unlike the other centrality measures, evcent()
# returns a complex object rather than a simple vector. Thus,
# we need to first get the evcent() output and then select the
# eigenvector scores from it.
s641_social_undirected <- as.undirected(s641_social, mode='collapse')
ev_obj_social <- igraph::evcent(s641_social_undirected)
eigen_social <- ev_obj_social$vector
eigen_social
#####
# Extra Credit - what code would you write in R
# to get the directed versions of eigenvector centrality?
#####
# To get the summary table, we'll construct a data frame with
# the vertices as rows and the centrality scores as columns.
#
# Note that the vertex IDs are NOT the same as the first column
# of row numbers. This is because we previously removed isolates.
central_social <- data.frame(V(s641_social)$name, indegree_social, outdegree_social, incloseness_social, outcloseness_social, betweenness_social, eigen_social)
central_social
# Now we'll examine the table to find the most central actors
# according to the different measures we have. When looking at
# each of these measures, it's a good idea to have your plot on
# hand so you can sanity-check the results.
plot(s641_social, vertex.size=10, vertex.label=V(s641_social)$name,
edge.arrow.size = 0.5, layout=layout.fruchterman.reingold,main='')
# Show table sorted by decreasing indegree. The order() function
# returns a vector in ascending order; the minus sign flips it
# to be descending order. Top actors are 18, 22 and 16.
central_social[order(-central_social$indegree_social),]
# Outdegree: 22, 18 and 19.
central_social[order(-central_social$outdegree_social),]
# In-closeness: 11, 15 and 18.
# NOTE: For some reason, this operation returns strange values;
# a visual inspection of the plot suggests that 11, 15, and 18
# are not central actors at all. This could be a bug.
central_social[order(-central_social$incloseness_social),]
# Out-closeness: 22, 16, and 19
central_social[order(-central_social$outcloseness_social),]
# Eigenvector: 18, 19, and 16
central_social[order(-central_social$eigen_social),]
# let's make a plot or two with these summary statistics
# To visualize these data, we can create a barplot for each
# centrality measure. In all cases, the y-axis is the value of
# each category and the x-axis is the node number.
barplot(central_social$indegree_social, names.arg=central_social$V.s641_social..name, main='inDeg')
barplot(central_social$outdegree_social, names.arg=central_social$V.s641_social..name, main='outDeg')
barplot(central_social$incloseness_social, names.arg=central_social$V.s641_social..name, main='inCloseness')
barplot(central_social$outcloseness_social, names.arg=central_social$V.s641_social..name, main='outCloseness')
barplot(central_social$betweenness_social, names.arg=central_social$V.s641_social..name, main='betweenness')
barplot(central_social$eigen_social, names.arg=central_social$V.s641_social..name, main='eigencentrality')
# Question #2 - What can we say about the social actors if we compare the bar plots?
# Who seems to run the show in sociable affairs? Who seems to bridge sociable conversations?
###
# 4. CORRELATIONS BETWEEN CENTRALITY MEASURES
###
# Now we'll compute correlations betwee the columns to determine
# how closely these measures of centrality are interrelated.
# Generate a table of pairwise correlations.
cor(central_social[,2:7])
# INTERPRETATION:
#
# Indegree and outdegree are very closely correlated (rho = 0.95),
# indicating that social talk with others is reciprocated (i.e.,
# if you talk to others, they tend to talk back to you).
#
# The same is not true of incloseness and outcloseness (rho =
# 0.38), indicating that the closeness calculated from inbound
# paths is not strongly associated with with closeness from
# outbound paths.
#
# In- and out-degree are highly correlated with eigenvector
# centrality, indicating that the students that talk the most to
# others (or, relatedly, are talked to the most by others) are
# also the ones that are connected to other highly connected
# students -- possibly indicating high density cliques around
# these individuals.
#
# Betweennes shows the highest corelation with outdegree, follwed
# by indegree. In the case of this particular network, it seems
# that the individuals that talk to the most others are the
# likeliest to serve as bridges between the particular cliques
# (see, e.g., 22 in the plot).
s641_task <- gneg
indegree_task <- igraph::degree(s641_task, mode='in')
outdegree_task <- igraph::degree(s641_task, mode='out')
incloseness_task <- igraph::closeness(s641_task, mode='in')
outcloseness_task <- igraph::closeness(s641_task, mode='out')
E(gneg)$weight <- abs(E(gneg)$weight)
s641_task <- gneg
indegree_task <- igraph::degree(s641_task, mode='in')
outdegree_task <- igraph::degree(s641_task, mode='out')
outdegree_task <- igraph::degree(s641_task, mode='out')
incloseness_task <- igraph::closeness(s641_task, mode='in')
outcloseness_task <- igraph::closeness(s641_task, mode='out')
betweenness_task <- igraph::betweenness(s641_task)
s641_task_undirected <- as.undirected(s641_task, mode='collapse')
ev_obj_task <- igraph::evcent(s641_task_undirected)
eigen_task <-ev_obj_task$vector
central_task <- data.frame(V(s641_task)$name, indegree_task, outdegree_task, incloseness_task, outcloseness_task, betweenness_social, eigen_task)
central_task[order(-central_task$indegree_task),]
connectednodes_social = as.numeric(levels(central_social$V.s641_social..name))[central_social$V.s641_social..name]
connectednodes_task = as.numeric(levels(central_task$V.s641_task..name))[central_task$V.s641_task..name]
length(connectednodes_social)
length(connectednodes_task)
cor(central_social[which(connectednodes_social %in% connectednodes_task),2:7], central_task[which(connectednodes_task %in% connectednodes_social),2:7])
log(1.03)
log(0.98)
log(0.97)
log(0.90)
log(1.10)
log(1.70)
log(0.30)
?simulate
?ergm
??ergm
??ergm()
setInternet2(TRUE)
_gzcon
?gzcon
rm(list=ls())
setInternet2(TRUE)
con = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))
source(con)
close(con)
load.packages('quantmod')
tickers = spl('UUP,EMB,HYG')
data <- new.env()
getSymbols(tickers, src = 'yahoo', from = '1970-01-01', env = data, auto.assign = T)
for(i in ls(data)) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)
bt.prep(data, align='remove.na')
stock.folder = 'C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE/raw'
getSymbols.sit(tickers, src = 'yahoo', from = '1980-01-01', env = data, auto.assign = T, stock.folder = stock.folder)
rm(list=ls())
library(PerformanceAnalytics)
library(zoo)
library(tseries)
install.packages("tseries")
library(tseries)
sp500 = get.hist.quote(instrument="^GSPC", start="2004-01-01",
end="2014-09-30", origin="1970-01-01",
quote="AdjClose", provider="yahoo",
compression="m", retclass="zoo")
sp500
?getSymbols
getSymbols('QQQ')
QQ
QQQ
getSymbols(tickers, src = 'yahoo', from = '1970-01-01', env = data, auto.assign = T)
load.packages('quantmod')
library('quantmod')
tickers = spl('UUP,EMB,HYG')
getSymbols(tickers, src = 'yahoo', from = '1970-01-01', env = data, auto.assign = T)
setInternet2(TRUE)
con = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))
source(con)
close(con)
library('quantmod')
tickers = spl('UUP,EMB,HYG')
data <- new.env()
class(tickers)
getSymbols(tickers, src = 'yahoo', from = '1970-01-01', env = data, auto.assign = T)
data
class(data)
for(i in ls(data)) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)
bt.prep(data, align='remove.na')
dAta
data
library("quantmod")  #Load the quantmod Library
rm(list=ls())
library("quantmod")  #Load the quantmod Library
stockData <- new.env() #Make a new environment for quantmod to store data in
startDate = as.Date("2008-01-13") #Specify period of time we are interested in
endDate = as.Date("2012-01-12")
tickers <- c("ARM","CSR") #Define the tickers we are interested in
getSymbols(tickers, env = stockData, src = "yahoo", from = startDate, to = endDate)
head(stockData$ARM)
Cl(stockData$ARM)
chartSeries(stockData$ARM)
barChart(ARM)
barChart(stockData$ARM)
addMACD()
tickers[1]
paste0('stockData$',ARM)
paste0('stockData$',tickers[1])
index(Cl(paste0('stockData$',ARM))
)
stockData[1]
stockData[,1]
str(stockData)
summary(stockData)
i=1
getSymbols(tickers[i], env = d, src = "yahoo", from = startDate, to = endDate)
stockData <- new.env() #Make a new environment for quantmod to store data in
getSymbols(tickers[i], env = stockData, src = "yahoo", from = startDate, to = endDate)
setwd('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE/raw/')
tickers <- c("ARM","CSR") #Define the tickers we are interested in
stockData <- new.env() #Make a new environment for quantmod to store data in
getSymbols(tickers[i], env = stockData, src = "yahoo", from = startDate, to = endDate)
write.csv(data.frame( date=index(Cl(stockData), coredata(Cl(stockData)) ), row.names=FALSE, file=paste0(tickers[i], 'csv')
)
)
head(stockData)
head(stockData$ARM)
index(paste0('stockData$','ARM'))
index(paste0('stockData$','CSR'))
index(stockData$CSR)
index(stockData$ARM)
rm(list)=ls()
rm(list=ls())
setwd('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE/raw/')
library("quantmod")  #Load the quantmod Library
stockData <- new.env() #Make a new environment for quantmod to store data in
rm(list=ls())
setwd('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE/raw/')
library("quantmod")  #Load the quantmod Library
# stockData <- new.env() #Make a new environment for quantmod to store data in
startDate = as.Date("2008-01-13") #Specify period of time we are interested in
endDate = as.Date("2012-01-12")
#Download the stock history (for all tickers)
tickers <- c("ARM","CSR") #Define the tickers we are interested in
for (i in 1:length(tickers)) {
#   stockData <- new.env() #Make a new environment for quantmod to store data in
getSymbols(tickers[i], env = stockData, src = "yahoo", from = startDate, to = endDate)
getSymbols(tickers[i], src = "yahoo", from = startDate, to = endDate)
i=1
getSymbols(tickers[i], src = "yahoo", from = startDate, to = endDate)
classARM
class(ARM)
write.csv(data.frame( date=index(Cl(stockData), coredata(Cl(stockData)) ), row.names=FALSE, file=paste0(tickers[i], 'csv')))
write.csv(data.frame( date=index(tickers[i]), coredata(tickers[i]) ), row.names=FALSE, file=paste0(tickers[i], 'csv')))
write.csv(data.frame( date=index(tickers[i]), coredata(tickers[i]) ), row.names=FALSE, file=paste0(tickers[i], 'csv'))
write.csv(data.frame( date=index(tickers[i]), coredata(tickers[i]) ), row.names=FALSE, file=paste0(tickers[i], '.csv'))
ARM
index(tickers[i])
tickers[i]
c <- getSymbols(tickers[i], src = "yahoo", from = startDate, to = endDate)
write.csv(data.frame( date=index(c), coredata(c) ), row.names=FALSE, file=paste0(tickers[i], '.csv'))
index(c)
coredata(c)
coredata(ARM)
class(ARM)
class(c)
d<-cbind(ARM)
d
class(c)
class(d)
write.csv(data.frame( date=index(d), coredata(d) ), row.names=FALSE, file=paste0(tickers[i], '.csv'))
d<-cbind(tickers[i])
d
?getSymbols
c <- getSymbols(tickers[i], src = "yahoo", from = startDate, to = endDate, file.path='C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE/raw/')
c <- getSymbols(tickers[i], src = "yahoo", from = startDate, to = endDate, file.path='C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE/raw/')
getSymbols(tickers[i], src = "yahoo", from = startDate, to = endDate, file.path='C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE/raw/')
write.csv(data.frame( date=index(getSymbols(tickers[i], src = "yahoo", from = startDate, to = endDate)), coredata(getSymbols(tickers[i], src = "yahoo", from = startDate, to = endDate)) ), row.names=FALSE, file=paste0(tickers[i], '.csv'))
data.frame(getSymbols(tickers[i], src = "yahoo", from = startDate, to = endDate))
c <- data.frame(getSymbols(tickers[i], src = "yahoo", from = startDate, to = endDate))
c <- apply(tickers, function(x) getSymbols(x, src='yahoo', from = startDate, to = endDate)))
c <- apply(tickers, function(x) getSymbols(x, src='yahoo', from = startDate, to = endDate))
c <- apply(tickers, function(x) getSymbols(x, src='yahoo', from = startDate, to = endDate))
c <- sapply(tickers, function(x) getSymbols(x, src='yahoo', from = startDate, to = endDate))
?apply
?sapply
?xts
?csv
symbols <- stockSymbols()
?stockSymbols
symbols <- c("ARM","CSR")
dataset<- xts() # Only run once
for(i in 1:length(symbols)) {
symbols[i]-> symbol
# specify the "from" date to desired start date
tryit <- try(getSymbols(symbol,from="2014-01-01", src='yahoo'))
if(inherits(tryit, "try-error")){
i <- i+1
} else {
# specify the "from" date to desired start date
data <- getSymbols(symbol, from="2014-01-01", src='yahoo')
dataset <- merge(dataset, Ad(get(symbols[i])))
rm(symbol)
}
}
getwd()
dataset
for(i in 1:length(symbols)) {
symbols[i]-> symbol
# specify the "from" date to desired start date
tryit <- try(getSymbols(symbol,from="2014-01-01", src='yahoo'))
if(inherits(tryit, "try-error")){
i <- i+1
} else {
# specify the "from" date to desired start date
data <- getSymbols(symbol, from="2014-01-01", src='yahoo')
dataset <- merge(dataset, Cl(get(symbols[i])))
rm(symbol)
}
#   setTxtProgressBar(pb, i)
}
dataset
startDate
startDate <- "2014-01-01"
# Actual loop:
for(i in 1:length(symbols)) {
symbols[i]-> symbol
# specify the "from" date to desired start date
tryit <- try(getSymbols(symbol,from=startDate, src='yahoo'))
if(inherits(tryit, "try-error")){
i <- i+1
} else {
# specify the "from" date to desired start date
data <- getSymbols(symbol, from="startDate", src='yahoo')
dataset <- merge(dataset, Cl(get(symbols[i])))
rm(symbol)
}
#   setTxtProgressBar(pb, i)
}
dataset
p <- data.frame(dataset)
todos <- read.csv('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE/YahooTickerSymbols-Jan2016.xlsx')
?read.csv
library(XLConnect)
install.packages("XLConnect")
library(XLConnect)
theData <- readWorksheet(loadWorkbook('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE/YahooTickerSymbols-Jan2016.xlsx'),sheet=1)
options(java.parameters = "-Xmx1000m")
theData <- readWorksheet(loadWorkbook('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE/YahooTickerSymbols-Jan2016.xlsx'),sheet=1)
options(java.parameters = "-Xmx4000m")
theData <- readWorksheet(loadWorkbook('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE/YahooTickerSymbols-Jan2016.xlsx'),sheet=1)
options(java.parameters = "-Xmx1000m")
library(rJava)
library(XLConnect)
theData <- readWorksheet(loadWorkbook('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE/YahooTickerSymbols-Jan2016.xlsx'),sheet=1)
options(java.parameters = "-Xmx4000m")
library(rJava)
library(XLConnect)
theData <- readWorksheet(loadWorkbook('C:/Users/Manuel/Desktop/Southampton/MasterThesis/Data/FTSE/YahooTickerSymbols-Jan2016.xlsx'),sheet=1)
